<!--
 * Ant build file for the DaCapo benchmark suite.
 *       
 * Public targets are 
 * - dist (default) compile from source and create the dacapo jar file. 
 * - sourcedist     download sources and build 
 * - sources        download the sources from the 'net, if they are available.
 * - srczip         create source zip file
 * - clean          remove files generated buring the build process
 * - distclean      remove files generated buring the build process, 
 *                  including the 'results'
 * - sourceclean    remove all distribution files, and all downloadable
 *                  sources.  This prepares an "ip-clean" distribution.
 * - depzip         generate a zip file containing two jars for every benchmark,
 *                  <bm>.jar and <bm>-deps.jar, containing the core of the
 *                  benchmark and its external dependencies respectively
 * - split-deps     use this target in combination with any of the others
 *                  to force external dependencies to be separated and placed
 *                  into a second generated jar file.
 * - release        create main jar, srczip and depzip, each appropriately named
 *                  according to the property "release.tag", so must be called
 *                  in conjunction with -Drelease.tag="<some-release-id-string>"
 *                  on the command line
 * - <bmname>       will compile a given benchmark
 * - compile        will compile all benchmarks
 * - jar.quick      will build a jar (undated) based on whatever has been compiled already
 * - jar.date       will build a dated jar based on whatever has been compiled already
 *
 * Therefore, individual benchmarks can be built into a jar using the
 * benchmark name (note that lucene covers both lusearch and luindex),
 * and the jar.quick or jar.date targets, which will create a jar with
 * no other dependencies.  For example:
 * - antlr jar.quick  creates a jar which can run the antlr benchmark (only)
 *       
 * External tools required (apart from a JDK and Ant)
 *   - make
 *   - javacc, assumed to be on the path, with library files in 
 *     /usr/share/javacc/lib
 *   
 *   Author: Robin Garner, Australian National University
 *   $Date: 2007-01-27 00:09:55 +0000 (Sat, 27 Jan 2007) $
 *   $Id: build.xml 263 2007-01-27 00:09:55 +0000 (Sat, 27 Jan 2007) steveb-oss $
-->

<project name="DacapoBenchmarks" default="dist" basedir=".">
	<description>Dacapo benchmarks</description>
	
	<!-- BEGIN USER-MODIFIABLE PROPERTIES -->
	<!-- download mirrors -->
	<property name="apache.dl.url" value="http://archive.apache.org/dist"/>
	<property name="sourceforge.dl.url" value="http://easynews.dl.sourceforge.net/sourceforge"/>
	
	<!-- external programs -->
	<property name="make" location="/usr/bin/make"/>
	<property name="javacchome" location="/usr/share/java"/>

	<!-- tested jres -->
	<property name="j9" value="/opt/ibm-java2-i386-50"/>
	<property name="jrockit" value="/opt/jrockit-R26.3.0-jdk1.5.0_06"/>
	<property name="sun" value="/opt/jdk1.5.0_07"/>
	<property name="blackdown" value="/usr/lib/j2se/1.4"/>

	<!-- END USER-MODIFIABLE PROPERTIES -->

	<!-- BEGIN PUBLIC TARGETS -->
	
	<!-- ================================= 
         target: dist              
         ================================= -->
	<target name="dist" depends="jar" description="--> Build the distribution from source"/>

	<!-- ================================= 
         target: sourcedist              
         ================================= -->
	<target name="sourcedist" depends="sources,dist" 
      description="--> Download the source and then build">
	</target>
	
	<!-- ================================= 
         target: sources          
         ================================= -->
	<target name="sources" 
    description="Download sources from their original locations"
    depends="init.sources,data.source,ant.source,antlr.source,batik.source,bloat.source,chart.source,eclipse.source,fop.source,hsqldb.source,jython.source,lucene.source,pmd.source,xalan.source,xerces.source">
	</target>
    	
	<!-- ================================= 
         target: srczip              
         ================================= -->
	<target name="srczip" depends="clean,init" description="--> Creates a source zip">
		<antcall target="srczip.basic">
			<param name="zip.suffix" value=""/>
			<param name="zip.basename" value="dacapo"/>
		</antcall>
	</target>

	<!-- ================================= 
         target: clean              
         ================================= -->
	<target name="clean" description="clean up after the build process">
        <delete failonerror="false" includeemptydirs="true">
          <fileset dir="${build}"/>
          <fileset dir="${build.src}"/>
          <fileset dir="${build.deps}"/>
          <fileset dir="${extra}/eclipse-plugin/@dot"/>
          <fileset dir="cachedir"/>
          <fileset dir="${dep.tmp}"/>
          <!-- Jython's mess -->
          <fileset dir="scratch"/>
        </delete>
	</target>

	<!-- ================================= 
         target: distclean              
         ================================= -->
	<target name="distclean" depends="clean"
          description="clean up including the resulting jar files">
		<delete dir="bin"/>
		<delete>
			<fileset dir="${basedir}">
				<include name="dacapo*.jar"/>
			</fileset>
		</delete>
	</target>

	<!-- ================================= 
          target: sourceclean              
         ================================= -->
	<target name="sourceclean" depends="distclean" 
            description="--> Delete all downloadable sources, too">
		<delete dir="${sources}"/>
	</target>
	
	<!-- ================================= 
         target: depzip        
         ================================= -->
	<target name="depzip" description="--> Create a zip file containing two jar files for each benchmark; one containing the benchmark, the other containing its dependencies">
		<antcall target="depzip.basic">
			<param name="zip.suffix" value=""/>
			<param name="zip.basename" value="dacapo"/>
		</antcall>
	</target>
	
	<!-- ================================= 
         target: split-deps        
         ================================= -->
	<target name="split-deps" description="--> Split the distribution into a core jar and a jar containting dependencies">
		<property name="externalize.deps" value="true"/>
	</target>

	<!-- ================================= 
          target: release              
         ================================= -->
	<target name="release" depends="srczip.release,jar.release,depzip.release" 
            description="--> Perform full clean, download, and then create all files necessary for a release">
	</target>
	
	<!-- ================================= 
         target: jar              
         ================================= -->
	<target name="jar" depends="compile,jar.date" description="generate the distribution jar file"/>

	<!-- ================================= 
         target: jar.quick            
         ================================= -->
	<target name="jar.quick" depends="harness,init" description="generate a jar file" >
		<antcall target="jar.basic">
			<param name="jar.suffix" value=""/>
			<param name="jar.basename" value="dacapo"/>
			<param name="jar.subdir" value="."/>
		</antcall>
	</target>
	
	<!-- ================================= 
         target: jar.date          
         ================================= -->
	<target name="jar.date" depends="harness,init" description="generate a jar file" >
		<antcall target="jar.basic">
			<param name="jar.suffix" value="-${DSTAMP}"/>
			<param name="jar.basename" value="dacapo"/>
			<param name="jar.subdir" value="."/>
		</antcall>
	</target>
	
	<!-- END PUBLIC TARGETS -->

	
	<!-- internal directory structure -->
	<property name="src" location="src"/>
	<property name="extra" location="../extra"/>
	<property name="bmsrc" location="bmsrc"/>
	<property name="patches" location="patches"/>
	<property name="build" location="build"/>
	<property name="build.src" location="build_src"/>
	<property name="build.deps" location="build_deps"/>
	<property name="originals" location="originals"/>
	<property name="sources" location="sources"/>
	<property name="data" location="data"/>
	<property name="zipdata" location="${build}/data"/>
	<property name="config" location="cnf"/>
	<property name="prune" location="prune"/>
	<property name="dep.tmp" location="deps"/>
	
	<!-- constraints -->
	<property name="constraints.gnuclasspath" value="true"/>

	<!-- benchmark versions -->
	<property name="antlr.version" value="2.7.2"/>
	<property name="batik.version" value="1.6"/>
	<property name="bloat.version" value="1.0"/>
	<property name="chart.version" value="1.0.0"/>
	<property name="eclipse.version" value="3.1.2"/>
	<property name="eclipse.drop" value="200601181600"/>
	<property name="fop.version" value="0.20.5"/>
	<property name="hsqldb.version" value="1_8_0_4"/>
	<property name="jython.version" value="Release_2_2alpha1"/>
	<property name="lucene.version" value="1.9.1"/>
	<property name="pmd.version" value="3.7"/>
	<property name="xalan.version" value="2_4_1"/>
	<!-- auxilary downloads -->
	<property name="ant.dl.version" value="1.6.5"/>
	<property name="itext.version" value="1.02b"/>
	<property name="junit.version" value="3.8.1"/>
	<property name="python.version" value="2.5"/>
	<property name="xerces.version" value="2.8.0"/><property name="xerces._version" value="2_8_0"/>

	<!-- benchmark locations -->
	<property name="antlr.url" value="http://www.antlr.org/download"/>
	<property name="batik.url" value="${apache.dl.url}/xml/batik"/>
	<property name="bloat.url" value="ftp://ftp.cs.purdue.edu/pub/hosking/bloat"/>
	<property name="chart.url" value="${sourceforge.dl.url}/jfreechart"/>
	<property name="eclipse.url" value="http://archive.eclipse.org/eclipse/downloads/drops/R-${eclipse.version}-${eclipse.drop}"/>
	<property name="fop.url" value="${apache.dl.url}/xml/fop/source"/>
	<property name="hsqldb.url" value="${sourceforge.dl.url}/hsqldb"/>
	<property name="jython.url" value="${sourceforge.dl.url}/jython"/>
	<property name="lucene.url" value="${apache.dl.url}/lucene/java"/>
	<property name="pmd.url" value="${sourceforge.dl.url}/pmd"/>
	<property name="xalan.url" value="${apache.dl.url}/xml/xalan-j/source"/>
	<!-- auxilary downloads -->
	<property name="ant.url" value="${apache.dl.url}/ant/binaries/"/>
	<property name="itext.url" value="${sourceforge.dl.url}/itext"/>
	<property name="junit.url" value="${sourceforge.dl.url}/junit"/>
	<property name="python.url" value="http://www.python.org/ftp/python/2.5/"/>
	<property name="xerces.url" value="${apache.dl.url}/xml/xerces-j/binaries"/>
	<!-- data downloads -->
	<property name="sfdata.url" value="http://dacapobench.sourceforge.net/source-data"/>
	<property name="shakespeare.url" value="${sfdata.url}/shakespeare.tgz"/>
	<property name="bible.url" value="${sfdata.url}/kjv.zip"/>
	<property name="xalan.data.url" value="http://www.w3.org/TR/2001/WD-xforms-20010608/WD-xforms-20010608.zip"/>
	<property name="shakespeare.xml.url" value="http://metalab.unc.edu/bosak/xml/eg/shaks200.zip"/>
	
	
	<!-- ================================= 
         target: initialize directory structures
         ================================= -->
	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<mkdir dir="${build.src}"/>
		<mkdir dir="${build.deps}"/>
		<mkdir dir="${build}/cnf"/>
		<mkdir dir="${zipdata}"/>
		<mkdir dir="${dep.tmp}"/>
	</target>	
	
	<!-- ================================= 
         target: source           
         ================================= -->
	<target name="source" depends="init" description="add source to build">
		<copy todir="${build}">
			<fileset dir="${src}" includes="**/*.java"/>
			<fileset dir="${bmsrc}" includes="**/*.java"/>
		</copy>
    </target>	

	<!-- ================================= 
         target: compile  all sources
         ================================= -->
	<target name="compile" depends="antlr,bloat,chart,eclipse,fop,hsqldb,jython,lucene,pmd,xalan"
          description="compile the sources for all benchmarks" >
	</target>
	
	<!-- ================================= 
         target: harness           
         ================================= -->
	<target name="harness" depends="init" description="compile the source ">
		<javacc javacchome="${javacchome}" target="${src}/dacapo/parser/ConfigFile.jj"/>
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}"
		       debug="true" debuglevel="lines,vars,source"/>
		<!-- Test data and configuration files -->
		<copy todir="${build}/cnf">
			<fileset dir="${config}"/>
		</copy>
	</target>

	<!-- ================================= 
         target: bms          
         ================================= -->
	<target name="bms" depends="compile" description="compile the benchmarks">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${bmsrc}" destdir="${build}" 
			   debug="true" debuglevel="lines,vars,source"/>

	</target>

	<!-- ================================= 
         target: jar.release            
         ================================= -->
	<target name="jar.release" depends="compile,harness,init" description="generate a jar file" >
		<antcall target="jar.basic">
			<param name="jar.suffix" value="-${release.tag}"/>
			<param name="jar.basename" value="dacapo"/>
			<param name="jar.subdir" value="."/>
		</antcall>
	</target>
	
	<!-- ================================= 
     	target: srczip.release              
     	================================= -->
	<target name="srczip.release" depends="clean,init,sources" description="--> Creates a source zip">
		<antcall target="srczip.basic">
			<param name="zip.suffix" value="-${release.tag}"/>
			<param name="zip.basename" value="dacapo"/>
		</antcall>
	</target>

	<!-- ================================= 
         target: depzip.release        
         ================================= -->
	<target name="depzip.release" description="--> Create a zip file containing two jar files for each benchmark; one containing the benchmark, the other containing its dependencies">
		<antcall target="depzip.basic">
			<param name="zip.suffix" value="-${release.tag}"/>
			<param name="zip.basename" value="dacapo"/>
		</antcall>
	</target>
	
    <!-- ================================= 
         target: jar.basic            
         ================================= -->
	<target name="jar.basic" depends="harness,init" description="generate a jar file with suffix (may be null)" >
		<antcall target="meta-inf">
			<param name="jarroot" value="${build}"/>
		</antcall>

		<!-- Put everything in ${build} into the dacapo${jar.suffix}.jar file -->
		<jar jarfile="${jar.subdir}/${jar.basename}${jar.suffix}.jar" basedir="${build}" index="true" manifest="${build}/META-INF/MANIFEST.MF"/>
		<antcall target="jar.deps"/>
	</target>
	
    <!-- ================================= 
         target: jar.deps           
         ================================= -->
	<target name="jar.deps" if="externalize.deps" depends="harness,init" description="generate a jar file with suffix (may be null)" >
		<!-- Put everything in ${build.deps} into the MyProject-build-deps${jar.suffix}.jar file -->
		<jar jarfile="${jar.subdir}/${jar.basename}-deps${jar.suffix}.jar" basedir="${build.deps}" index="true" />
	</target>

	<!-- ================================= 
         target: srczip.basic           
         ================================= -->
	<target name="srczip.basic" depends="clean,init" description="--> Creates a source zip">
		<zip destfile="${zip.basename}${zip.suffix}-src.zip">
			<fileset dir=".." includes="extra/eclipse-plugin/*" excludes="**/CVS"/>
			<fileset dir=".." includes="extra/eclipse-plugin/src/**" excludes="**/CVS"/>
			<fileset dir=".." includes="extra/eclipse-plugin/META-INF/**" excludes="**/CVS"/>
			<fileset dir=".." includes="benchmarks/LICENSE-2.0.txt"/>
			<fileset dir=".." includes="benchmarks/README.txt"/>
			<fileset dir=".." includes="benchmarks/bmsrc/**" excludes="**/CVS"/>
			<fileset dir=".." includes="benchmarks/build.xml"/>
			<fileset dir=".." includes="benchmarks/cnf/**" excludes="**/CVS"/>
			<fileset dir=".." includes="benchmarks/data/**" excludes="**/CVS"/>
			<fileset dir=".." includes="benchmarks/patches/**" excludes="**/CVS"/>
			<fileset dir=".." includes="benchmarks/src/**" excludes="**/CVS"/>
		</zip>
	</target>
	

	<!-- ================================= 
         target: depzip.basic        
         ================================= -->
	<target name="depzip.basic" depends="dep.jars" description="--> Create a zip file containing two jar files for each benchmark; one containing the benchmark, the other containing its dependencies">
		<zip basedir="${dep.tmp}" includes="**" destfile="${zip.basename}${zip.suffix}-deps.zip"/>
	</target>
	
	<!-- ================================= 
         target: dep.jars        
         ================================= -->
	<target name="dep.jars" description="--> Create two jar files for each benchmark; one containing the benchmark, the other containing its dependencies">
		<antcall target="dep.jar"><param name="bm" value="antlr" /></antcall>
		<antcall target="dep.jar"><param name="bm" value="bloat" /></antcall>
		<antcall target="dep.jar"><param name="bm" value="chart" /></antcall>
		<antcall target="dep.jar"><param name="bm" value="eclipse" /></antcall>
		<antcall target="dep.jar"><param name="bm" value="fop" /></antcall>
		<antcall target="dep.jar"><param name="bm" value="hsqldb" /></antcall>
		<antcall target="dep.jar"><param name="bm" value="jython" /></antcall>
		<antcall target="dep.jar"><param name="bm" value="luindex" /></antcall>
		<antcall target="dep.jar"><param name="bm" value="lusearch" /></antcall>
		<antcall target="dep.jar"><param name="bm" value="pmd" /></antcall>
		<antcall target="dep.jar"><param name="bm" value="xalan" /></antcall>
	</target>
	
	<!-- ================================= 
         target: dep.jar     
         ================================= -->
	<target name="dep.jar" depends="split-deps" description="--> Create two jar files for each benchmark; one containing the benchmark, the other containing its dependencies">
        <delete failonerror="false" includeemptydirs="true">
          <fileset dir="${build}"/>
          <fileset dir="${build.deps}"/>
        </delete>
		<antcall target="${bm}"/>
		<antcall target="jar.basic">
			<param name="jar.basename" value="${bm}" />
			<param name="jar.suffix" value="" />
			<param name="jar.subdir" value="${dep.tmp}" />
		</antcall>
	</target>
		
	<!-- ================================= 
         target: meta-inf             
         ================================= -->
	<target name="meta-inf" depends="init" description="meta-inf for jars" >
		<copy todir="${jarroot}/META-INF" overwrite="true">
			<fileset dir="${src}/META-INF"/>
		</copy>
	</target>

	<!-- ================================= 
          target: prune            
         ================================= -->
	<target name="prune" depends="jar" description="prune out the jar file">
		<property name="prune.timestamp" value="${prune}/timestamp"/>
		<property name="prune.scratch" value="${prune}/scratch"/>
		<mkdir dir="${prune.scratch}"/>
		<mkdir dir="${prune}/full"/>
		<unjar src="dacapo-${DSTAMP}-full.jar" dest="${prune}/full"/>
		<touch>
			<fileset dir="${prune}/full"/>
		</touch>
		<touch file="${prune.timestamp}"/>
		<!--		<antcall target="prune.eclipse"/> -->
		<antcall target="fullrun"/>
		<exec dir="${prune}/full" executable="find">
			<arg line="${prune}/full/ ! -anewer ../timestamp -delete"/>
		</exec>
		<antcall target="meta-inf">
			<param name="jarroot" value="${prune}/full"/>
		</antcall>
		<jar jarfile="dacapo-${DSTAMP}-prune.jar" basedir="${prune}/full" index="true"
         manifest="${prune}/full/META-INF/MANIFEST.MF"/>
		<delete dir="${prune}"/>
	</target>

	<!-- ================================= 
          target: fullrun        
         ================================= -->
	<target name="fullrun" description="execute all benchmarks at all sizes for all jres">
		<antcall target="jrerun">
			<param name="jre" value="${j9}"/>
		</antcall>
		<antcall target="jrerun">
			<param name="jre" value="${sun}"/>
		</antcall>
		<antcall target="jrerun">
			<param name="jre" value="${jrockit}"/>
		</antcall>
		<antcall target="jrerun">
			<param name="jre" value="${blackdown}"/>
		</antcall>
	</target>

	<!-- ================================= 
          target: jrerun        
         ================================= -->
	<target name="jrerun" description="execute all benchmarks at all sizes for one jre">
		<antcall target="sizerun">
			<param name="size" value="small"/>
		</antcall>
		<antcall target="sizerun">
			<param name="size" value="default"/>
		</antcall>
		<antcall target="sizerun">
			<param name="size" value="large"/>
		</antcall>
	</target>

	<!-- ================================= 
          target: sizerun        
         ================================= -->
	<target name="sizerun" description="execute all benchmarks at one size">
		<antcall target="run">
			<param name="bm" value="antlr" />
		</antcall>
		<antcall target="run">
			<param name="bm" value="batik" />
		</antcall>
		<antcall target="run">
			<param name="bm" value="bloat" />
		</antcall>
		<antcall target="run">
			<param name="bm" value="chart" />
		</antcall>
		<antcall target="run">
			<param name="bm" value="eclipse" />
		</antcall>
		<antcall target="run">
			<param name="bm" value="fop" />
		</antcall>
		<antcall target="run">
			<param name="bm" value="hsqldb" />
		</antcall>
		<antcall target="run">
			<param name="bm" value="jython" />
		</antcall>
		<antcall target="run">
			<param name="bm" value="luindex" />
		</antcall>
		<antcall target="run">
			<param name="bm" value="lusearch" />
		</antcall>
		<antcall target="run">
			<param name="bm" value="pmd" />
		</antcall>
		<antcall target="run">
			<param name="bm" value="xalan" />
		</antcall>
	</target>
	
	<!-- ================================= 
          target: run        
         ================================= -->
	<target name="run" description="execute one benchmark at one size">
		<echo message="${jre} -classpath ${prune}/full Harness -s ${size} ${bm}" />
		<java classname="Harness" fork="yes" jvm="${jre}/bin/java" newenvironment="true">
			<env key="JAVA_HOME" value="${jre}"/>
			<arg line="-scratch ${prune.scratch} -s ${size} ${bm}" />
			<classpath>
				<pathelement path="${prune}/full" />
			</classpath>
		</java>
	</target>


	<!-- *************************************************************************** -->
	<!--                        Fetch sources                                        -->
	<!-- *************************************************************************** -->

	<target name="init.sources" description="Prepare to download sources">
		<mkdir dir="${sources}"/>
	</target>

	<target name="ant.source" depends="init.sources">
		<get dest="${sources}/apache-ant-${ant.dl.version}-bin.zip"
         src="${ant.url}/apache-ant-${ant.dl.version}-bin.zip"
       usetimestamp="true"/>
	</target>
				
	<target name="antlr.source" depends="init.sources">
		<get src="${antlr.url}/antlr-${antlr.version}.tar.gz"
         dest="${sources}/antlr-${antlr.version}.tar.gz"
       usetimestamp="true"/>
	</target>

	<target name="batik.source" depends="init.sources">
		<get src="${batik.url}/batik-src-${batik.version}.zip"
         dest="${sources}/batik-src-${batik.version}.zip"
         usetimestamp="true"/>
	</target>

	<target name="bloat.source" depends="init.sources">
		<get src="${bloat.url}/bloat-${bloat.version}-src.tar.gz"
         dest="${sources}/bloat-${bloat.version}-src.tar.gz"
	     usetimestamp="true"/>
	</target>

	<target name="chart.source" depends="init.sources">
		<get src="${chart.url}/jfreechart-${chart.version}.tar.gz"
         dest="${sources}/jfreechart-${chart.version}.tar.gz"
       usetimestamp="true"/>
		<get src="${itext.url}/itext-${itext.version}.jar"
         dest="${sources}/itext-${itext.version}.jar"
       usetimestamp="true"/>
	</target>

	<target name="eclipse.source" depends="init.sources">
		<get src="${eclipse.url}/eclipse-SDK-${eclipse.version}-linux-gtk.tar.gz"
	     dest="${sources}/eclipse-SDK-${eclipse.version}-linux.gtk.tar.gz"
	     usetimestamp="true"/>
		<get src="${eclipse.url}/eclipse-Automated-Tests-${eclipse.version}.zip"
		 dest="${sources}/eclipse-Automated-Tests-${eclipse.version}.zip"
		 usetimestamp="true"/>
	</target>

	<target name="fop.source" depends="init.sources">
		<get src="${fop.url}/fop-${fop.version}-src.tar.gz"
         dest="${sources}/fop-${fop.version}-src.tar.gz"
       usetimestamp="true"/>
	</target>

	<target name="hsqldb.source" depends="init.sources,junit.source">
		<get src="${hsqldb.url}/hsqldb_${hsqldb.version}.zip"
    	dest="${sources}/hsqldb_${hsqldb.version}.zip"  
       usetimestamp="true"/>
	</target>

	<target name="jython.source" depends="init.sources, python.source">
		<get src="${jython.url}/jython_${jython.version}.jar"
     	dest="${sources}/jython_${jython.version}.jar"  
        usetimestamp="true"/>
	</target>

	<target name="python.source" depends="init.sources">
		<get src="${python.url}/Python-${python.version}.tgz"
     	dest="${sources}/Python-${python.version}.tgz"  
        usetimestamp="true"/>
	</target>

	<target name="junit.source" depends="init.sources">
		<get dest="${sources}/junit${junit.version}.zip"
         src="${junit.url}/junit${junit.version}.zip"
       usetimestamp="true"/>
	</target>
			
	<target name="lucene.source" depends="init.sources">
		<get dest="${sources}/lucene-${lucene.version}-src.tar.gz"
         src="${lucene.url}/lucene-${lucene.version}-src.tar.gz"
         usetimestamp="true"/>
	</target>

	<target name="pmd.source" depends="junit.source,init.sources">
		<get src="${pmd.url}/pmd-src-${pmd.version}.zip"
         dest="${sources}/pmd-src-${pmd.version}.zip"
       usetimestamp="true"/>
	</target>

	<target name="xalan.source" depends="xerces.source">
		<get src="${xalan.url}/xalan-j_${xalan.version}-src.tar.gz"
               dest="${sources}/xalan-j_${xalan.version}-src.tar.gz"
         usetimestamp="true"/>
	</target>

	<target name="xerces.source" depends="init.sources">
		<get src="${xerces.url}/Xerces-J-bin.${xerces.version}.tar.gz"
         dest="${sources}/Xerces-J-bin.${xerces.version}.tar.gz"
       usetimestamp="true"/>
	</target>

	<target name="data.source" depends="init.sources">
		<get src="${shakespeare.url}" dest="${sources}/shakespeare.tgz" usetimestamp="true"/>
		<get src="${bible.url}" dest="${sources}/kjv.zip" usetimestamp="true"/>
		<get src="${xalan.data.url}" dest="${sources}/xalan.data.zip" usetimestamp="true"/>
	</target>


	<!-- *************************************************************************** -->
	<!--                            Build                                            -->
	<!-- *************************************************************************** -->

	<!-- ================================= 
          target: ant            
       ================================= -->
	<target name="ant" description="--> The ant library - required by some other benchmarks">
		<!-- Install the ant jar file -->
		<unzip src="${sources}/apache-ant-${ant.dl.version}-bin.zip" dest="${build.src}/ant/">
			<patternset>
				<include name="apache-ant-${ant.dl.version}/lib/ant.jar"/>
				<include name="apache-ant-${ant.dl.version}/lib/ant-launcher.jar"/>
			</patternset>
		</unzip>
		<move file="${build.src}/ant/apache-ant-${ant.dl.version}/lib/ant.jar" tofile="${build.src}/ant/ant.jar"/>
		<move file="${build.src}/ant/apache-ant-${ant.dl.version}/lib/ant-launcher.jar" tofile="${build.src}/ant/ant-launcher.jar"/>
	</target>

	<!-- ================================= 
        target: antlr 
       ================================= -->
	<target name="antlr" description="Build antlr" depends="harness">
		<mkdir dir="${build.src}/antlr"/>
		<untar src="${sources}/antlr-${antlr.version}.tar.gz" 
           dest="${build.src}/antlr/"
         compression="gzip"/>

		<!-- Apply the dacapo patch -->
		<patch patchfile="${patches}/antlr.patch" 
           dir="${build.src}"
           strip="0"/>

		<!-- Build directly with javac, classfiles into the build directory -->
		<javac srcdir="${build.src}/antlr/antlr-${antlr.version}/antlr/"
            classpath="${build}"
            destdir="${build}"
			debug="true" debuglevel="lines,vars,source"/>

		<!-- Install the test data -->
		<zip basedir="${data}"
         includes="antlr/**"
         destfile="${zipdata}/antlr.zip"/>

		<javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}"
                 includes="dacapo/antlr/*"
			debug="true" debuglevel="lines,vars,source"/>
	</target>

	<!-- ================================= 
        target: batik 
       ================================= -->
	<target name="batik" description="Build batik" depends="batik.benchmark,batik.harness"/>
	<target name="batik.harness" description="Build batik" depends="harness">
		<javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}"
                 includes="dacapo/batik/*"
			debug="true" debuglevel="lines,vars,source"/>
	</target>
	<target name="batik.benchmark" description="Build batik" depends="harness,xerces">
		<property name="batik-top" value="${build.src}/batik/xml-batik"/>

		<mkdir dir="${build.src}/batik"/>

		<!-- unpack the source files -->
		<unzip src="${sources}/batik-src-${batik.version}.zip" dest="${build.src}/batik/"/>

		<!-- Apply the dacapo patch -->
		<fixcrlf srcdir="${batik-top}/sources" includes="**/*.java"/>
		<patch patchfile="${patches}/batik.patch" 
           dir="${build.src}"
           strip="0" ignorewhitespace="yes"/>

		<!-- Build using the supplied build.xml -->
		<ant antfile="${batik-top}/build.xml" dir="${batik-top}" 
         target="compiletest" inheritall="false">
			<property name="dacapo.classes" location="${build}"/>
			<property name="build.compiler" value="classic"/>
		</ant>

		<!-- Copy the batik class files -->
		<copy todir="${build}">
			<fileset dir="${batik-top}/classes">
				<include name="**/*.class"/>
			</fileset>
		</copy>

	    <!-- unjar dependencies into build.deps directory -->
		<unjar src="${batik-top}/lib/build/ant_1_4_1.jar" dest="${build.deps}"/>
		<unjar src="${batik-top}/lib/build/crimson-ant.jar" dest="${build.deps}"/>
		<unjar src="${batik-top}/lib/build/stylebook-1.0-b3_xalan-2.jar" dest="${build.deps}"/>
		<unjar src="${batik-top}/lib/build/xalan-2.0.1.jar" dest="${build.deps}"/>
		<unjar src="${batik-top}/lib/js.jar" dest="${build.deps}"/>
		<unjar src="${batik-top}/lib/pdf-transcoder.jar" dest="${build.deps}"/>
		<unjar src="${batik-top}/lib/xerces_2_5_0.jar" dest="${build.deps}"/>
		<unjar src="${batik-top}/lib/xml-apis.jar" dest="${build.deps}"/>

		<!-- Copy the batik resource files -->
		<copy todir="${build}">
			<fileset dir="${batik-top}/resources" excludes="${batik-top}/resources/**/CVS">
				<include name="**"/>
			</fileset>
		</copy>

		<!-- Install the test data -->
		<zip basedir="${data}"
         includes="batik/**"
         destfile="${zipdata}/batik.zip"/>

	</target>

	<!-- ================================= 
        target: bloat 
       ================================= -->
	<target name="bloat" depends="bloat.benchmark,bloat.harness" description="Build bloat"/>
	<!-- Build the bloat dacapo harness -->
	<target name="bloat.harness" depends="harness" description="Build bloat">
		<javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" 
			includes="dacapo/bloat/*"
			debug="true" debuglevel="lines,vars,source"/>
	</target>
	<!-- Build the bloat benchmark -->
	<target name="bloat.benchmark" description="Build bloat" depends="harness">
		<property name="bloat-top" value="${build.src}/bloat"/>
		<mkdir dir="${bloat-top}"/>

		<!-- Un-tar the source distribution -->
		<untar src="${sources}/bloat-${bloat.version}-src.tar.gz" 
           dest="${bloat-top}"
         compression="gzip"/>

		<!-- Apply the dacapo patch -->
		<patch patchfile="${patches}/bloat.patch" 
               dir="${bloat-top}"
               strip="0" ignorewhitespace="yes"/>

		<!-- Build bloat -->
		<exec executable="${make}" dir="${bloat-top}/src/EDU/purdue/cs/bloat/"/>

		<!-- Copy the class files into the build directory -->
		<copy todir="${build}">
			<fileset dir="${bloat-top}/src" excludes="${bloat-top}/resources/**/CVS">
				<include name="**/*.class"/>
			</fileset>
		</copy>
	</target>


	<!-- ================================= 
          target: chart              
         ================================= -->
	<target name="chart" depends="chart.benchmark,chart.harness" description="--> build the jFreeChart benchmark"/>
	<!-- Build the chart dacapo harness -->
	<target name="chart.harness" depends="init" description="--> build the jFreeChart harness">
		<javac srcdir="${bmsrc}" classpath="${build}:${build.deps}" destdir="${build}" 
			includes="dacapo/chart/*"
			debug="true" debuglevel="lines,vars,source"/>
	</target>
	<!-- Build the chart benchmark -->
	<target name="chart.benchmark" depends="init,harness" description="--> build the jFreeChart benchmark">
		<property name="chart-top" value="${build.src}/chart/jfreechart-${chart.version}"/>

		<!-- Untar the source distribution -->
		<mkdir dir="${build.src}/chart/"/>
		<untar src="${sources}/jfreechart-${chart.version}.tar.gz" dest="${build.src}/chart/" compression="gzip"/>

		<!-- Build it using jfreechart's build.xml -->
		<ant antfile="${chart-top}/ant/build.xml" dir="${chart-top}" target="compile" inheritall="false"/>

		<!-- Copy files to the build directory -->
		<unjar src="${chart-top}/jfreechart-${chart.version}.jar" dest="${build}"/>
		<antcall target="chart.libs"/>
		<antcall target="chart.deps"/>
		
		<!-- Install the test data -->
		<zip basedir="${data}" includes="chart/**" destfile="${zipdata}/chart.zip"/>
	</target>
	<!-- Add external libraries to the build -->
	<target name="chart.libs" unless="externalize.deps" depends="init,harness" description="--> add the chart libraries to the build">
		<unjar src="${chart-top}/lib/jcommon-${chart.version}.jar" dest="${build}"/>
		<unjar src="${sources}/itext-1.02b.jar" dest="${build}"/>
    </target>
	<!-- Add external libraries to the deps -->
	<target name="chart.deps" if="externalize.deps" depends="init,harness" description="--> add the chart libraries to the build">
		<unjar src="${chart-top}/lib/gnujaxp.jar" dest="${build.deps}"/>
		<unjar src="${chart-top}/lib/jcommon-${chart.version}.jar" dest="${build.deps}"/>
		<unjar src="${chart-top}/lib/servlet.jar" dest="${build.deps}"/>
		<unjar src="${sources}/itext-1.02b.jar" dest="${build.deps}"/>
    </target>
		

	<!-- ================================= 
          target: eclipse              
         ================================= -->
	<target name="eclipse" depends="eclipse.data,eclipse.harness" description="--> build the eclipse benchmark"/>

	<!-- Build the eclipse dacapo harness -->
	<target name="eclipse.harness" depends="init,harness" description="--> build the eclipse harness">
		<javac 	srcdir="${bmsrc}" 
				destdir="${build}" includes="dacapo/eclipse/*.java"
				debug="true" debuglevel="lines,vars,source">
			<classpath>
		      	<pathelement path="${build}"/>
				<pathelement path="${build.src}/eclipse/eclipse/plugins/org.eclipse.osgi_${eclipse.version}.jar"/>
				<pathelement path="${build.src}/eclipse/eclipse/plugins/org.eclipse.core.runtime_${eclipse.version}.jar"/>
				<pathelement path="${build.src}/eclipse/eclipse/plugins/org.eclipse.jdt.launching_3.1.0.jar"/>
			</classpath>
		</javac>
	</target>

	<!-- Build the eclipse benchmark -->
	<target name="eclipse.benchmark" depends="init" description="--> build the eclipse benchmark">
		<property name="eclipse-top" value="${build.src}/eclipse/eclipse"/>

		<untar src="${sources}/eclipse-SDK-${eclipse.version}-linux.gtk.tar.gz" dest="${build.src}/eclipse/" compression="gzip"/>
		<unzip src="${sources}/eclipse-Automated-Tests-${eclipse.version}.zip" dest="${build.src}/eclipse/">
			<patternset>
				<include name="eclipse-testing/eclipse-junit-tests-M*.zip"/>
			</patternset>
		</unzip>
		<unzip dest="${build.src}/eclipse/">
			<fileset dir="${build.src}/eclipse/eclipse-testing/">
				<include name="eclipse-junit-tests-M*.zip"/>
			</fileset>
		</unzip>
		<delete dir="${build.src}/eclipse/eclipse-testing"/>
	</target>

	<!-- build the eclipse plugin, which is necessary to fire up eclipse from within our harness -->
	<target name="eclipse.plugin" depends="eclipse.benchmark,eclipse.harness" description="--> build the eclipse harness">
		<ant antfile="${extra}/eclipse-plugin/build.xml" dir="${extra}/eclipse-plugin" 
         target="build.update.jar" inheritall="false">
			<property name="eclipsesrc.home" location="${eclipse-top}"/>
			<property name="harness.home" location="${build}"/>
			<property name="plugin.destination" location="${eclipse-top}/plugins/"/>
		</ant>
	</target>

	<!-- only delete the directories if not constrained by Jikes RVM -->
	<target name="eclipse.clearosgi" unless="constraints.jikesrvm">
		<delete dir="${osgihack}/org"/>
	</target>

	<!-- gut org.eclipse.osgi_XXXX.jar of its classes, which will become part of the main jar -->
	<target name="eclipse.osgiclasses" depends="eclipse.benchmark">
		<property name="osgihack" value="${build.src}/eclipse/osgihack"/>
		<!-- unzip the jar -->
		<unzip dest="${osgihack}" src="${eclipse-top}/plugins/org.eclipse.osgi_${eclipse.version}.jar"/>
		<!-- copy out the class files -->
		<copy todir="${build}">
			<fileset dir="${osgihack}" includes="org/**/*"/>
		</copy>
		<!-- conditionally clean out the stuff we've duplicated -->
		<!--	<antcall target="eclipse.clearosgi"/> -->
		<delete dir="${osgihack}/org"/>
		<!-- jar up the remainder -->
		<zip basedir="${osgihack}" includes="**/*" destfile="${eclipse-top}/plugins/org.eclipse.osgi_${eclipse.version}.jar"/>
		<delete dir="${osgihack}"/>
	</target>

	<!-- Create the eclipse data file -->
	<target name="eclipse.data" depends="eclipse.benchmark,eclipse.plugin,eclipse.osgiclasses" description="--> build the eclipse data file">
		<!-- Create the fake jre -->
		<unzip dest="${build.src}/eclipse/dummyjre" src="${data}/eclipse/dummyjre.zip"/>
		
		<!-- Install the test data -->
		<zip destfile="${zipdata}/eclipse.zip">
			<!-- The dummy jre -->
			<fileset dir="${build.src}/eclipse/" includes="dummyjre/**"/>
			
			<!-- The eclipse runtime.  We just include as little as we can, -->
			<!-- using an empirically derived list of what we really need.  -->
			<fileset dir="${build.src}/eclipse/" includes="eclipse/*"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/about_files/**"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/configuration/**"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/features/**"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/readme/**"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/dacapo.eclipse_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.apache.ant_*/**"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.core.expressions_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.core.resources_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.core.runtime.compatibility_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.core.runtime_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.core.variables_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.debug.core_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.core.tests.builder_*/**"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.core.tests.compiler_*/**"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.core.tests.performance_*/**"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.core_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.launching_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.debug_*/**"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.osgi_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.test.performance_*/**"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.text_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.update.configurator_*.jar"/>
			<fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.junit_*/**"/>
		</zip>
	</target>


	<!-- ================================= 
          target: fop              
         ================================= -->
	<target name="fop" depends="fop.benchmark,fop.harness" description="--> build the eclipse benchmark"/>
	<!-- Build the fop dacapo harness -->
	<target name="fop.harness" depends="harness" description="--> Build the fop harness">
		<javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" 
			includes="dacapo/fop/*"
			debug="true" debuglevel="lines,vars,source"/>
	</target>
	<!-- Build the fop benchmark -->
	<target name="fop.benchmark" depends="init,harness" description="--> Build the fop benchmark">
		<mkdir dir="${build.src}/fop"/>
		<property name="fop-top" value="${build.src}/fop/fop-${fop.version}/"/>
		<!-- Expand the source distribution -->
		<untar src="${sources}/fop-${fop.version}-src.tar.gz" 
           dest="${build.src}/fop" compression="gzip"/>

		<!-- Build it using fop's build.xml      
           Use 'exec' rather than 'ant' because of the brain-damaged way that fop's
           build.xml handles relative directories.  The classpath allows the patched
           sources to see the test harness code.
        -->
		<exec executable="ant" dir="${fop-top}"/>

		<!-- Copy the build to the distribution directory -->
		<unjar src="${fop-top}/build/fop.jar" dest="${build}"/>
        <antcall target="fop.libs"/>
		<antcall target="fop.deps"/>
		
		<!-- Install the test data -->
		<zip basedir="${data}" includes="fop/**" destfile="${zipdata}/fop.zip"/>

		<!-- Build the fop dacapo harness -->
		<javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" 
			includes="dacapo/fop/*"
			debug="true" debuglevel="lines,vars,source"/>
	</target>
	<!-- Add external libraries to the build -->
	<target name="fop.libs" unless="externalize.deps" depends="init,harness" description="--> add the chart libraries to the build">
		<unjar src="${fop-top}/lib/avalon-framework-cvs-20020806.jar" dest="${build}"/>
		<unjar src="${fop-top}/lib/batik.jar" dest="${build}"/>
    </target>
	<!-- Add external libraries to the deps -->
	<target name="fop.deps" if="externalize.deps" depends="init,harness" description="--> add the chart libraries to the build">
		<unjar src="${fop-top}/lib/batik.jar" dest="${build.deps}"/>
		<unjar src="${fop-top}/lib/xalan-2.4.1.jar" dest="${build.deps}"/>
		<unjar src="${fop-top}/lib/ant-1.5.1.jar" dest="${build.deps}"/>
		<unjar src="${fop-top}/lib/xml-apis.jar" dest="${build.deps}"/>
		<unjar src="${fop-top}/lib/avalon-framework-cvs-20020806.jar" dest="${build.deps}"/>
		<unjar src="${fop-top}/lib/xercesImpl-2.2.1.jar" dest="${build.deps}"/>
    </target>

	<!-- ================================= 
          target: junit             
       ================================= -->
	<target name="junit" description="--> The junit library - required by some other benchmarks">
		<!-- Install the junit jar file -->
		<unzip src="${sources}/junit${junit.version}.zip" dest="${build.src}/junit/">
			<patternset>
				<include name="junit${junit.version}/junit.jar"/>
			</patternset>
		</unzip>
	</target>


	<!-- ================================= 
          target: hsqldb              
       ================================= -->
	<target name="hsqldb" depends="hsqldb.benchmark,hsqldb.harness" description="--> build the hsqldb benchmark"/>
	<!-- Build the hsqldb dacapo harness -->
	<target name="hsqldb.harness" depends="harness" description="--> The hsqldb dacapo harness">
		<javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" 
			includes="dacapo/hsqldb/*"
			debug="true" debuglevel="lines,vars,source"/>
	</target>
	<!-- Build the hsqldb benchmark -->
	<target name="hsqldb.benchmark" depends="harness,junit" description="--> The hsqldb benchmark">
		<mkdir dir="${build.src}/hsqldb"/>
		<property name="hsqldb-top" value="${build.src}/hsqldb/"/>
		<!-- Expand the source distribution -->
		<unzip src="${sources}/hsqldb_${hsqldb.version}.zip" dest="${hsqldb-top}"/>

		<copy file="${build.src}/junit/junit${junit.version}/junit.jar"
            todir="${hsqldb-top}/hsqldb/lib/"/>

		<!-- Build it using hsqldb's build.xml -->
		<ant antfile="${hsqldb-top}/hsqldb/build/build.xml" dir="${hsqldb-top}/hsqldb" 
           target="hsqldbtest" inheritall="false"/>

		<!-- Copy the build to the distribution directory -->
		<unjar src="${hsqldb-top}/hsqldb/lib/hsqldbtest.jar" dest="${build}"/>
		<antcall target="hsqldb.deps"/>
	</target>
	<!-- Add external libraries to the deps -->
	<target name="hsqldb.deps" if="externalize.deps" depends="init,harness" description="--> add the chart libraries to the build">
		<unjar src="${hsqldb-top}/hsqldb/lib/servlet.jar" dest="${build.deps}"/>
		<unjar src="${hsqldb-top}/hsqldb/lib/junit.jar" dest="${build.deps}"/>
    </target>	
	
	<!-- ================================= 
          target: jython                
         ================================= -->
	<target name="jython" depends="jython.benchmark,jython.harness" description="--> build the jython benchmark"/>
	<!-- Build the jython dacapo harness -->
	<target name="jython.harness" depends="harness" description="--> Build the Jython dacapo harness">
		<javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" 
			includes="dacapo/jython/*"
			debug="true" debuglevel="lines,vars,source"/>
	</target>
	<!-- Build the jython benchmark -->
	<target name="jython.benchmark" depends="init,ant" description="--> Build the Jython benchmark">
		<property name="jython-top" value="${build.src}/jython/"/>
		<mkdir dir="${jython-top}/jython_${jython.version}"/>

		<unzip src="${sources}/jython_${jython.version}.jar" dest="${jython-top}/jython_${jython.version}"/>

		<!-- Apply the dacapo patch, which allows us to set the arguments -->
		<patch patchfile="${patches}/jython.patch" 
                 dir="${jython-top}/jython_${jython.version}/src/java"
                 strip="0" ignorewhitespace="yes"/>

		<!-- copy requisite files into place-->
		<copy todir="${jython-top}/jython_${jython.version}/src/java">
			<fileset file="${jython-top}/jython_${jython.version}/build.*"/>
		</copy>

		<!-- Build jython -->
		<ant antfile="${jython-top}/jython_${jython.version}/src/java/build.xml" dir="${jython-top}/jython_${jython.version}/src/java" inheritall="false">
			<property name="javaccHome2" location="${javacchome}"/>
			<property name="python.lib" location="${jython-top}/jython_${jython.version}/Lib"/>
		</ant>

		<!-- Copy files to the distribution directory -->
		<unjar src="${jython-top}/jython_${jython.version}/src/java/dist/jython.jar" dest="${build}"/>
		<antcall target="jython.deps"/>

		<!-- Extract the pybench benchmark from the python sources -->
		<untar src="${sources}/Python-${python.version}.tgz" dest="${jython-top}" compression="gzip">
			<patternset>
				<include name="Python-${python.version}/Tools/pybench/**"/>
			</patternset>
		</untar>
		<move file="${jython-top}/Python-${python.version}/Tools/pybench" todir="${jython-top}/jython"/>


		<!-- patch the pybench benchmark to allow it to work with jython -->
		<patch patchfile="${patches}/pybench.patch" 
                 dir="${jython-top}/jython"
                 strip="0" ignorewhitespace="yes"/>
		<copy todir="${jython-top}/jython/Lib">
			<fileset dir="${jython-top}/jython_${jython.version}/Lib"/>
		</copy>


		<!-- Install the test data -->
		<zip destfile="${zipdata}/jython.zip">
			<fileset dir="${data}/" includes="jython/noop.py"/>
			<fileset dir="${data}/" includes="jython/sieve.py"/>
			<fileset dir="${jython-top}/" includes="jython/pybench/**"/>
			<fileset dir="${jython-top}/" includes="jython/Lib/**"/>
		</zip>
	</target>
	<!-- Add external libraries to the deps -->
	<target name="jython.deps" if="externalize.deps" depends="init,harness" description="--> add the chart libraries to the build">
		<unjar src="${build.src}/ant/ant.jar" dest="${build.deps}"/>
		<unjar src="${build.src}/ant/ant-launcher.jar" dest="${build.deps}"/>
	</target>	


	<!-- ================================= 
          target: luindex    
         ================================= -->
	<target name="luindex" depends="lucene"/>
	
	<!-- ================================= 
          target: lusearch   
         ================================= -->
	<target name="lusearch" depends="lucene"/>

	<!-- ================================= 
          target: lucene    
         ================================= -->
	<target name="lucene" depends="lucene.benchmark,lucene.harness" description="--> build the lucene benchmark"/>
	<!-- Build the lucene dacapo harness -->
	<target name="lucene.harness" depends="harness" description="--> Build the lucene dacapo harness">
		<javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" includes="dacapo/luindex/*" debug="true" debuglevel="lines,vars,source"/>
		<javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" includes="dacapo/lusearch/*"	debug="true" debuglevel="lines,vars,source"/>
	</target>
	<!-- Build the lucene benchmark -->
	<target name="lucene.benchmark" depends="init" description="--> Build the lucene benchmark">
		<property name="lucene-top" value="${build.src}/lucene"/>
		<mkdir dir="${lucene-top}"/>
		<untar src="${sources}/lucene-${lucene.version}-src.tar.gz" dest="${lucene-top}"
    	compression="gzip"/>

		<!-- Build using Ant -->
		<ant antfile="${lucene-top}/lucene-${lucene.version}/build.xml"
           target="jar-core"
           dir="${lucene-top}/lucene-${lucene.version}"
           inheritall="false">
		</ant>

		<!-- Build using Ant -->
		<ant antfile="${lucene-top}/lucene-${lucene.version}/build.xml"
           target="jar-demo"
           dir="${lucene-top}/lucene-${lucene.version}"
           inheritall="false">
		</ant>

		<!-- Install the lucene classes in the build directory -->
		<unjar src="${lucene-top}/lucene-${lucene.version}/build/lucene-core-1.9.2-dev.jar" 
             dest="${build}"/>
		<unjar src="${lucene-top}/lucene-${lucene.version}/build/lucene-demos-1.9.2-dev.jar" 
             dest="${build}"/>

		<!-- Install the luindex test data -->
		<mkdir dir="${data}/luindex"/>
		<mkdir dir="${data}/luindex/william"/>
		<untar src="${sources}/shakespeare.tgz" dest="${data}/luindex/william" compression="gzip"/>
		<mkdir dir="${data}/luindex/kjv"/>
		<unzip src="${sources}/kjv.zip" dest="${data}/luindex/kjv"/>
		<zip destfile="${zipdata}/luindex.zip">
			<fileset dir="${data}/" includes="luindex/kjv/**/*"/>
			<fileset dir="${data}/" includes="luindex/william/**/*"/>
		</zip>
		<delete dir="${data}/luindex"/>

		<!-- Install the lusearch test data -->
		<zip destfile="${zipdata}/lusearch.zip">
			<fileset dir="${data}" includes="lusearch/query*" />
			<fileset dir="${data}" includes="lusearch/index-default/**" />
		</zip>
	</target>

	<!-- ================================= 
          target: pmd    
         ================================= -->
	<target name="pmd" depends="pmd.benchmark,pmd.harness" description="--> build the pmd benchmark"/>
	<!-- Build the pmd dacapo harness -->
	<target name="pmd.harness" depends="harness" description="--> Build the pmd dacapo harness">
		<javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" 
			includes="dacapo/pmd/*"
			debug="true" debuglevel="lines,vars,source"/>
	</target>
	<!-- Build the pmd benchmark -->
	<target name="pmd.benchmark" depends="init,ant,xerces,junit" description="--> Build the pmd benchmark">

		<mkdir dir="${build.src}/pmd"/>
		<property name="pmd-top" value="${build.src}/pmd/pmd-${pmd.version}"/>

		<!-- Expand the pmd distribution zipfile -->
		<unzip src="${sources}/pmd-src-${pmd.version}.zip" dest="${build.src}/pmd"/>

		<!-- Apply the dacapo patch -->
		<patch patchfile="${patches}/pmd.patch" dir="${build.src}" strip="0"/>
		
		<!-- Build using Ant, setting the classpath appropriately -->
		<exec dir="${pmd-top}/bin" executable="ant">
			<arg value="compile"/>
			<env key="CLASSPATH" value=".:${build.src}/junit/junit${junit.version}/junit.jar"/>
			<env key="ANT_HOME" value="${ant.install}"/>
		</exec>

		<!-- Copy the classfiles to the dist directory -->
		<copy todir="${build}">
			<fileset dir="${pmd-top}/build">
				<include name="net/**/*.class"/>
			</fileset>
		</copy>
		<antcall target="pmd.libs"/>
		<antcall target="pmd.deps"/>
		
		<!-- Construct the test data -->
		<property name="pmd-data" value="${pmd-top}/data/pmd"/>
		<mkdir dir="${pmd-data}"/>
		<copy todir="${pmd-data}">
			<fileset dir="${pmd-top}/src">
				<include name="net/**/*.java"/>
			</fileset>
		</copy>
		<copy todir="${pmd-data}">
			<fileset dir="${pmd-top}">
				<include name="rulesets/**/*"/>
			</fileset>
		</copy>
		<copy todir="${pmd-data}" >
			<fileset dir="${data}/pmd">
				<include name="*.lst"/>
			</fileset>
		</copy>

		<!-- Install the test data -->
		<zip basedir="${pmd-top}/data" includes="pmd/**" destfile="${zipdata}/pmd.zip"/>
		<delete dir="${pmd-top}/data"/>
	</target>
	<!-- Add external libraries to the build -->
	<target name="pmd.libs" unless="externalize.deps" depends="init,harness" description="--> add the chart libraries to the build">
		<unjar src="${pmd-top}/lib/jaxen-1.1-beta-7.jar" dest="${build}"/>
		<unjar src="${build.src}/junit/junit${junit.version}/junit.jar" dest="${build}"/>
    </target>
	<!-- Add external libraries to the deps -->
	<target name="pmd.deps" if="externalize.deps" depends="init,harness" description="--> add the chart libraries to the build">
	    <unjar src="${pmd-top}/lib/xmlParserAPIs-2.6.2.jar" dest="${build.deps}"/>
	    <unjar src="${pmd-top}/lib/jakarta-oro-2.0.8.jar" dest="${build.deps}"/>
	    <unjar src="${pmd-top}/lib/jaxen-1.1-beta-7.jar" dest="${build.deps}"/>
	    <unjar src="${pmd-top}/lib/xercesImpl-2.6.2.jar" dest="${build.deps}"/>
		<unjar src="${build.src}/junit/junit${junit.version}/junit.jar" dest="${build.deps}"/>
		<unjar src="${build.src}/ant/ant.jar" dest="${build.deps}"/>
		<unjar src="${build.src}/ant/ant-launcher.jar" dest="${build.deps}"/>
    </target>

	<!-- ================================= 
        target: xalan
       ================================= -->
	<target name="xalan" depends="xalan.jar,xalan.data,xalan.harness" description="--> build the xalan benchmark"/>
	<!-- Build the xalan dacapo harness -->
	<target name="xalan.harness" depends="harness" description="Build xalan">
		<javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" 
			includes="dacapo/xalan/*"
			debug="true" debuglevel="lines,vars,source"/>
	</target>
	<!-- Build the xalan input data -->
	<target name="xalan.data" depends="init" description="Create data zip">
		<mkdir dir="${xalan-top}/xalan-data/xalan/"/>
		<unzip src="${sources}/xalan.data.zip" dest="${xalan-top}/xalan-data/xalan/">
			<patternset>
				<include name="*.xml"/>
				<include name="xmlspec.xsl"/>
			</patternset>
		</unzip>
		<zip basedir="${xalan-top}/xalan-data/" includes="xalan/**" destfile="${zipdata}/xalan.zip"/>
	</target>
	<!-- Build the xalan benchmark -->
	<target name="xalan.benchmark" depends="init,xerces" description="Build xalan">
		<property name="xalan-top" value="${build.src}/xalan/"/>
		<property name="xalan-v" value="${xalan.version}"/>
		<property name="xalan.xerces.jar" value="${xerces-top}/xerces-${xerces._version}/${xerces.jar}"/>
		<property name="xalan.xercesxml.jar" value="${xerces-top}/xerces-${xerces._version}/${xercesxml.jar}"/>
		<mkdir dir="${xalan-top}"/>

		<!-- Unpack the source distribution -->
		<untar src="${sources}/xalan-j_${xalan-v}-src.tar.gz" dest="${xalan-top}" compression="gzip"/>

		<!-- Apply the dacapo patch -->
		<patch patchfile="${patches}/xalan.patch" dir="${build.src}" strip="0"/>

		<!-- Build using Ant, setting the classpath appropriately -->
		<exec dir="${xalan-top}/xalan-j_${xalan-v}" executable="ant">
			<env key="CLASSPATH" value=".:${xalan.xerces.jar}:${xalan.xercesxml.jar}"/>
			<env key="ANT_HOME" value="${ant.install}"/>
		</exec>
		
		<antcall target="xalan.deps"/>
				
		<!-- Grab the xalan class files from the built jar files -->
		<unjar src="${xalan-top}/xalan-j_${xalan-v}/build/xalan.jar" dest="${build}"/>
	</target>
	<!-- Copy a stand-alone xalan jar into the build -->
	<target name="xalan.jar" unless="externalize.deps" depends="xalan.benchmark" description="put a standalone xalan jar into the jar">
		<copy file="${xalan-top}/xalan-j_${xalan-v}/build/xalan.jar" todir="${build}"/>
	</target>
	<!-- Add external libraries to the deps -->
	<target name="xalan.deps" if="externalize.deps" depends="init,harness" description="--> add the chart libraries to the build">
	    <unjar src="${xalan-top}/xalan-j_${xalan-v}/bin/xml-apis.jar" dest="${build.deps}"/>
	    <unjar src="${xalan-top}/xalan-j_${xalan-v}/bin/xercesImpl.jar" dest="${build.deps}"/>
    </target>

	<!-- ================================= 
        target: xerces 

  Not a benchmark in its own right, but a library that several of
  the benchmarks rely on.
       ================================= -->
	<target name="xerces" description="Build xerces">
		<property name="xerces-top" value="${build.src}/xerces/"/>
		<mkdir dir="${xerces-top}"/>

		<!-- Unpack the source distribution -->
		<untar src="${sources}/Xerces-J-bin.${xerces.version}.tar.gz" 
           dest="${xerces-top}" compression="gzip"/>

		<condition property="xerces.jar" value="xerces.jar" else="xercesImpl.jar">
			<contains string="${xerces.version}" substring="1.4.4"/>
		</condition>
		<condition property="xercesxml.jar" value="xmlParserAPIs.jar" else="xml-apis.jar">
			<contains string="${xerces.version}" substring="2.2.1"/>
		</condition>
		<antcall target="xerces.libs"/>
		<antcall target="xerces.deps"/>
	</target>
	<!-- Add external libraries to the build -->
	<target name="xerces.libs" unless="externalize.deps" depends="init,harness" description="--> add the chart libraries to the build">
		<unjar src="${xerces-top}/xerces-${xerces._version}/${xerces.jar}" dest="${build}"/>
		<unjar src="${xerces-top}/xerces-${xerces._version}/${xercesxml.jar}" dest="${build}"/>
    </target>
	<!-- Add external libraries to the deps -->
	<target name="xerces.deps" if="externalize.deps" depends="init,harness" description="--> add the chart libraries to the build">
		<unjar src="${xerces-top}/xerces-${xerces._version}/${xerces.jar}" dest="${build.deps}"/>
		<unjar src="${xerces-top}/xerces-${xerces._version}/${xercesxml.jar}" dest="${build.deps}"/>
    </target>
</project>
