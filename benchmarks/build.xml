<!--
 * Copyright (c) 2009 The Australian National University.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License v2.0.
 * You may obtain the license at
 * 
 *    http://www.opensource.org/licenses/apache2.0.php
 -->
<project name="DacapoBenchmarks" default="dist" basedir=".">
    <property name="toolsdir" location="../tools"/>
    <property name="log.dir" value="${basedir}/log"/>
    <property environment="env"/>
    <tstamp>
        <format property="build.time" pattern="yyyyMMdd-hhmm"/>
    </tstamp>
    <description>
            The DaCapo Benchmark Suite

DEPENDENCIES:
   - javacc(included) (http://javacc.dev.java.net/)
   - maven(included)  (http://maven.apache.org/)
   - ant (http://ant.apache.org)
   - cvs (http:/www.nongnu.org/cvs/)
   - svn (http://subversion.apache.org)
   - hg (https://www.mercurial-scm.org)

For convinience, javacc and maven are included in the tools directory:
    ${toolsdir}

        
BUILDING:
        0. System requirement:
            Building DaCapo requires latest JDK 8.
            JDK 9 is currently not supported (some benchmarks will fail with error).
            If building PMD and/or DayTrader,
                make sure JDK 7 is also installed and
                it's path set in local.properties file.
                See 3 below.

            Building the whole suite at once on macOS **may** have problem with max filehandle limits.
            You may want to set it to a larger value, and launch ant with:
                $ JAVA_OPTS="-XX:-MaxFDLimit" ant

        1. Set your JAVA_HOME environment variable appropriately:
             On Mac OS X something like:
                export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/
             On Ubuntu 16.04 something like:
                export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_151/

        2. Set ant and maven environment variables if necessary.  In particular,
        for some jvms it is necessary to explicitly request a larger heap size.
        It is necessary to set the maven options because the trade benchmarks
        are built by maven (called by ant).  As another example, you may wish
        for ant to use a proxy when downloading (there is a lot to be
        downloaded).   Some examples:
            export ANT_OPTS="-Xms512M -Xmx512M"
            export MAVEN_OPTS="-Xms512M -Xmx512M"
        or
            export ANT_OPTS="-Dhttp.proxyHost=xxx.xxx.xxx.xxx -Dhttp.proxyPort=3128"

        3. Copy default.properties to local.properties and edit local.properties
        for your environment.

        4. Run ant:
        ant         [builds all benchmarks]
        ant dist    [builds all benchmarks, this is the default]
        ant source  [builds a source distribution including benchmarks and tools]
        ant bm      [builds a specific benchmark, bm]

        5. A log of each directory is created under this benchmark directory
        for benchmark build status and build success or failure files
        to be stored.  The directory log directory is normally of the
        form
        ${basedir}/log/${build.time}
        and contains status.txt where each benchmark build status is recorded,
        and either pass.txt if all benchmarks build, or fail.txt if one or
        more benchmarks fail to build. Note: that either fail.txt or pass.txt
        is created when a full build is performed.

</description>

    <property file="local.properties"/>
    <property file="default.properties"/>
    <property file="dacapo.properties"/>
    <property name="log.build.dir" value="${log.dir}/${build.time}"/>
    <property name="log.build.report" value="${log.dir}/${build.time}/status.txt"/>
    <property name="log.build.pass" value="${log.dir}/${build.time}/pass.txt"/>
    <property name="log.build.fail" value="${log.dir}/${build.time}/fail.txt"/>

    <property name="dacapo.build.dir" value="${basedir}/build"/>
	<property name="dacapo.build.doc.dir" value="${dacapo.build.dir}/doc"/>
	<property name="dacapo.doc.dir" value="${basedir}/doc"/>
	<property name="dacapo.src.dir" value="${basedir}/src"/>

    <target name="check-git-present">
        <available property="git.present" file="../.git" type="dir"/>
        <property name="git.exe" value="git"/>
    </target>

    <target name="extract-git-revision" depends="check-git-present" if="git.present">
        <exec executable="${git.exe}" failonerror="no" failifexecutionfails="no">
            <arg line="show --abbrev-commit HEAD"/>
            <redirector outputproperty="git.hash">
                <outputfilterchain>
                    <linecontainsregexp>
                        <regexp pattern="^commit [a-z0-9]+$"/>
                    </linecontainsregexp>
                    <tokenfilter>
                        <replacestring from="commit " to=""/>
                    </tokenfilter>
                </outputfilterchain>
            </redirector>
        </exec>
    </target>

    <target name="get-git-revision" depends="extract-git-revision" unless="git.hash">
        <!-- set property if not already set -->
        <property name="git.hash" value="unknown"/>
    </target>

    <target name="set-build-version-info" depends="get-git-revision">
        <property name="build.nickname" value="${dacapo.nickname}"/>
        <!-- overwritable with -Dbuild.is-official=true on commandline-->
        <condition property="build.version"
                    value="${dacapo.version}"
                    else="${dacapo.version}-git+${git.hash}">
            <isset property="build.is-official"/>
        </condition>
        <!-- set target jar name -->
        <property name="build.target-jar" value="dacapo.jar"/>
    </target>

    <target name="init" depends="set-build-version-info">
        <!-- Create the time stamp -->
        <tstamp/>
        <delete dir="${log.build.dir}" />
        <delete dir="${dacapo.build.doc.dir}"/>
        <delete dir="${dacapo.build.dir}" />

        <mkdir dir="${log.build.dir}" />
        <mkdir dir="${dacapo.build.dir}" />
        <mkdir dir="${dacapo.build.doc.dir}"/>
    	
        <echo>build.nickname=${build.nickname}</echo>
        <echo>build.version=${build.version}</echo>
    </target>

    <!-- BEGIN PUBLIC TARGETS -->

    <!-- =================================
         target: source
         ================================= -->
    <target name="source" depends="set-build-version-info">
        <echo file="SOURCE_VERSION.txt">This source distribution was built from DaCapo release ${build.version} "${build.nickname}"${line.separator}</echo>

        <zip destfile="dacapo-${build.version}-${build.nickname}-src.zip" level="9" whenempty="create">
            <zipfileset dir="${basedir}/.." defaultexcludes="yes" filemode="755">
                <include name="tools/*/bin/**"/>
            </zipfileset>
            <zipfileset dir="${basedir}/.." defaultexcludes="yes">
                <!-- add readme etc -->
               <include name="README.md"/>
               <include name="LICENSE"/>
               <include name="benchmarks/doc/*"/>
               <include name="benchmarks/bms/*/doc/*"/>

                <!-- add source readme indicating where this is from -->
                <include name="benchmarks/SOURCE_VERSION.txt"/>

                <!-- benchmark top level source -->
                <include name="benchmarks/*.xml"/>
                <include name="benchmarks/dacapo.properties"/>
                <include name="benchmarks/default.properties"/>
                <include name="benchmarks/RELEASE_NOTES.txt"/>

                <!-- benchmark harness source -->
                <include name="benchmarks/src/**"/>
                <include name="benchmarks/bms/*/harness/src/**"/>
                <include name="benchmarks/harness/*.xml"/>
                <include name="benchmarks/harness/downloads/**.MD5"/>
                <include name="benchmarks/harness/src/**"/>

                <!-- libs source -->
                <include name="benchmarks/libs/*.xml"/>
                <include name="benchmarks/libs/*/*.xml"/>
                <include name="benchmarks/libs/*/*.patch"/>
                <include name="benchmarks/libs/*/*.pl"/>
                <include name="benchmarks/libs/*/data/**"/>
                <include name="benchmarks/libs/*/downloads/**.MD5"/>
                <include name="benchmarks/libs/*/src/**"/>

                <!-- add benchmark xml -->
                <include name="benchmarks/bms/*.xml"/>

                <!-- add each benchmark -->
                <include name="benchmarks/bms/*/*.cnf"/>
                <include name="benchmarks/bms/*/*.patch"/>
                <include name="benchmarks/bms/*/*.xml"/>
                <include name="benchmarks/bms/*/*.properties"/>
                <include name="benchmarks/bms/*/META-INF/**"/>
                <include name="benchmarks/bms/*/data/**"/>
                <include name="benchmarks/bms/*/downloads/**.MD5"/>
                <include name="benchmarks/bms/*/src/**"/>

                <!-- add pmd toolchain setup script -->
                <include name="benchmarks/bms/pmd/mvn_toolchain_setup.sh"/>

                <!-- add eclipse's plugin -->
                <include name="benchmarks/bms/eclipse/plugin/META-INF/**"/>
                <include name="benchmarks/bms/eclipse/plugin/src/**"/>
                <include name="benchmarks/bms/eclipse/plugin/*.xml"/>
                <include name="benchmarks/bms/eclipse/plugin/build.properties"/>
                <include name="benchmarks/bms/eclipse/plugin/javaCompiler...args"/>
                <include name="benchmarks/bms/eclipse/bundles-default.lst"/>
                <include name="benchmarks/bms/eclipse/bundles-required.lst"/>
                <include name="benchmarks/bms/eclipse/bundles-stub-required.lst"/>

               <!-- add daytrader plugin -->
                <include name="benchmarks/libs/daytrader/plugins/**"/>
                <include name="benchmarks/libs/daytrader/daytrader/**"/>

                <!-- add tools -->
                <include name="tools/**"/>

                <!-- exclude svn -->
                <exclude name="benchmarks/**/.svn"/>

                <!-- exclude defunct benchmarks -->
                <exclude name="benchmarks/bms/antlr/**"/>
                <exclude name="benchmarks/bms/bloat/**"/>
                <exclude name="benchmarks/bms/chart/**"/>
                <exclude name="benchmarks/bms/hsqldb/**"/>
                <exclude name="tools/*/bin/**"/>
            </zipfileset>
        </zip>
    </target>

    <!-- ================================= 
         target: dist              
         ================================= -->
    <target name="dist" depends="harness,compile">
        <move file="${build.target-jar}" tofile="dacapo-${build.version}.jar"/>
    </target>

    <target name="doc" depends="init,bootstrap,harness" description="make the top level documentation">
    	
    	<jar /> 
    </target>

	
    <!-- =================================
         target: bootstrap for running harness
         ================================= -->
    <target name="bootstrap" depends="init">
    	<!-- construct the bootstrap -->
        <javac srcdir="${dacapo.src.dir}" destdir="${dacapo.build.dir}"/>

    	<!-- set the manifest for the jar -->
        <copy file="${dacapo.src.dir}/META-INF/MANIFEST.MF" todir="${dacapo.build.dir}"/>
        <echo file="${dacapo.build.dir}/MANIFEST.MF" append="yes">Specification-Version: ${build.nickname}${line.separator}</echo>
        <echo file="${dacapo.build.dir}/MANIFEST.MF" append="yes">Implementation-Version: ${build.version}${line.separator}</echo>

    	<!-- form the top level info -->
        <copy file="${basedir}/../LICENSE" todir="${dacapo.build.dir}"/>
        <copy file="${basedir}/../README.md" todir="${dacapo.build.dir}"/>
        <copy file="${basedir}/RELEASE_NOTES.txt" todir="${dacapo.build.dir}"/>

    	<!-- this forms the base document section -->
        <copy file="${basedir}/../LICENSE" todir="${dacapo.build.doc.dir}"/>
        <copy file="${basedir}/../README.md" todir="${dacapo.build.doc.dir}"/>
		<copy file="${basedir}/RELEASE_NOTES.txt" todir="${dacapo.build.doc.dir}" />

		<copy todir="${dacapo.build.doc.dir}">
			<fileset dir="${dacapo.doc.dir}"/>
		</copy>

    	<!-- construct the base jar -->
        <jar jarfile="${build.target-jar}" basedir="${dacapo.build.dir}" update="false" manifest="${dacapo.build.dir}/MANIFEST.MF" excludes="MANIFEST.MF"/>
    </target>

    <target name="clean-bootstrap" depends="init">
        <delete dir="${dacpao.build.doc.dir}"/>
        <delete dir="${dacpao.build.dir}"/>
    </target>

    <!-- ================================= 
         target: compile  all sources
         ================================= -->
    <target name="compile" depends="avrora,batik,h2,eclipse,fop,jython,luindex,lusearch,pmd,sunflow,tradebeans,tradesoap,tomcat,xalan">
        <antcall target="build.status.fail" />
        <antcall target="build.status.pass" />
    </target>
	
    <!-- ================================= 
         target: harness           
         ================================= -->
    <target name="harness" depends="init,bootstrap" description="compile the source ">
        <ant antfile="harness/build.xml"/>
    </target>
	
    <target name="clean-harness" depends="init">
        <ant antfile="harness/build.xml" target="clean"/>
    </target>

    <!-- *************************************************************************** -->
    <!--                            Clean                                            -->
    <!-- *************************************************************************** -->

    <macrodef name="clean.bm">
        <attribute name="benchmark"/>
        <sequential>
            <exec executable="ant" failifexecutionfails="no" failonerror="no" resultproperty="clean-@{benchmark}-status">
                <arg value="-Dtoolsdir=${toolsdir}"/>
                <arg value="-Dbuild.time=${build.time}"/>
                <arg value="-Dlog.build.dir=${log.build.dir}"/>
                <arg value="-buildfile"/>
                <arg value="bms/@{benchmark}/build.xml"/>
                <arg value="clean"/>
            </exec>
        </sequential>
    </macrodef>
 
    <target name="clean-benchmarks" depends="init">
        <clean.bm benchmark="avrora"/>
        <clean.bm benchmark="batik"/>
        <clean.bm benchmark="h2"/>
        <clean.bm benchmark="eclipse"/>
        <clean.bm benchmark="fop"/>
        <clean.bm benchmark="jython"/>
        <clean.bm benchmark="luindex"/>
        <clean.bm benchmark="lusearch"/>
        <clean.bm benchmark="lusearch-fix"/>
        <clean.bm benchmark="pmd"/>
        <clean.bm benchmark="sunflow"/>
        <clean.bm benchmark="tomcat"/>
        <clean.bm benchmark="tradebeans"/>
        <clean.bm benchmark="tradesoap"/>
        <clean.bm benchmark="xalan"/>
    </target>

    <target name="clean" depends="clean-benchmarks,clean-harness,clean-bootstrap"/>
  
    <!-- *************************************************************************** -->
    <!--                            Build                                            -->
    <!-- *************************************************************************** -->
    <target name="build.status.fail" if="build.failed">
        <echo level="error">
build: FAIL
See ${log.build.report} for a summary of benchmark build status.
    </echo>
        <echo file="${log.build.fail}" level="error" message="build: FAIL${line.separator}"/>
    </target>

    <target name="build.status.pass" unless="build.failed">
        <echo level="error" message="build: PASS${line.separator}"/>
        <echo file="${log.build.pass}" level="error" message="build: PASS${line.separator}"/>
    </target>

    <macrodef name="build.bm">
        <attribute name="benchmark"/>
        <sequential>
            <exec executable="ant" failifexecutionfails="no" failonerror="no" resultproperty="@{benchmark}-status">
                <arg value="-Dtoolsdir=${toolsdir}"/>
                <arg value="-Dbuild.time=${build.time}"/>
                <arg value="-Dlog.build.dir=${log.build.dir}"/>
                <arg value="-Dbuild.target-jar=${build.target-jar}"/>
                <arg value="-buildfile"/>
                <arg value="bms/@{benchmark}/build.xml"/>
                <arg value="incremental"/>
            </exec>
            <condition property="@{benchmark}.failed">
                <isfailure code="${@{benchmark}-status}"/>
            </condition>
            <condition property="@{benchmark}.message" value="FAIL" else="PASS">
                <isset property="@{benchmark}.failed"/>
            </condition>
            <condition property="build.failed">
                <and>
                    <not>
                        <isset property="build.failed"/>
                    </not>
                    <isset property="@{benchmark}.failed"/>
                </and>
            </condition>
            <echo level="error" message="@{benchmark}: ${@{benchmark}.message}${line.separator}"/>
            <echo file="${log.build.report}" append="true" level="error" message="@{benchmark}: ${@{benchmark}.message}${line.separator}"/>
            <fail message="@{benchmark}: FAIL">
                <condition>
                    <and>
                        <istrue value="${build.failonerror}"/>
                        <isset property="@{benchmark}.failed"/>
                    </and>
                </condition>
            </fail>
        </sequential>
    </macrodef>

    <target name="avrora" depends="init,harness">
        <build.bm benchmark="avrora"/>
    </target>
    <target name="batik" depends="init,harness">
        <build.bm benchmark="batik"/>
    </target>
    <target name="h2" depends="init,harness">
        <build.bm benchmark="h2"/>
    </target>
    <target name="eclipse" depends="init,harness">
        <build.bm benchmark="eclipse"/>
    </target>
    <target name="fop" depends="init,harness">
        <build.bm benchmark="fop"/>
    </target>
    <target name="jython" depends="init,harness">
        <build.bm benchmark="jython"/>
    </target>
    <target name="luindex" depends="init,harness">
        <build.bm benchmark="luindex"/>
    </target>
    <target name="lusearch" depends="init,harness">
        <build.bm benchmark="lusearch"/>
    </target>
    <target name="pmd" depends="init,harness">
        <build.bm benchmark="pmd"/>
    </target>
    <target name="sunflow" depends="init,harness">
        <build.bm benchmark="sunflow"/>
    </target>
    <target name="tomcat" depends="init,harness">
        <build.bm benchmark="tomcat"/>
    </target>
    <target name="tradebeans" depends="init,harness">
        <build.bm benchmark="tradebeans"/>
    </target>
    <target name="tradesoap" depends="init,harness">
        <build.bm benchmark="tradesoap"/>
    </target>
    <target name="daytrader" depends="tradebeans, tradesoap"/>
    <target name="xalan" depends="init,harness">
        <build.bm benchmark="xalan"/>
    </target>
</project>
