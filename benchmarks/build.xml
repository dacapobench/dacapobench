<!--
 * Copyright (c) 2009 The Australian National University.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License v2.0.
 * You may obtain the license at
 * 
 *    http://www.opensource.org/licenses/apache2.0.php
 -->
<project name="DacapoBenchmarks" default="dist" basedir=".">
    <property name="toolsdir" location="../tools"/>
    <property name="log.dir" value="${basedir}/log"/>
    <property environment="env"/>
    <tstamp>
        <format property="build.time" pattern="yyyyMMdd-hhmm"/>
    </tstamp>
    <description>
        The DaCapo Benchmark Suite

        DEPENDENCIES:
        - maven (included) (http://maven.apache.org/)
        - ant (http://ant.apache.org)
        - cvs (http:/www.nongnu.org/cvs/)
        - svn (http://subversion.apache.org)
        - hg (https://www.mercurial-scm.org)
        - npm (https://www.npmjs.com/get-npm)
        - node.js (https://nodejs.org/en/)
        - python3 (https://www.python.org/)
        python libraries:
        - colorama (https://pypi.org/project/colorama/)
        - future (https://pypi.org/project/future/)
        - tabulate (https://pypi.org/project/tabulate/)
        - requests (https://pypi.org/project/requests/)
        - wheel (https://pypi.org/project/wheel/)
        For convinience maven is included in the tools directory:
        ${toolsdir}

	For Debian-based systems:
	    sudo apt-get install npm python3 python-is-python3

        BUILDING:
        1. System requirement:
        Building DaCapo requires both JDK 11 and JDK 8.
        If building cassandra, graphchi, jython, and/or xalan, make sure to
        create the local.properties file (using default.properties as a
        templcate), and be sure to set the path to JDK 8 in that file.

        Building the whole suite at once on macOS **may** run into problems
        with max filehandle limits.  You may want to set it to a larger value,
        and launch ant with:
        $ JAVA_OPTS="-XX:-MaxFDLimit" ant

        2. Set ant and maven environment variables if necessary.  In particular,
        for some jvms it is necessary to explicitly request a larger heap size.
        It is necessary to set the maven options because the trade benchmarks
        are built by maven (called by ant).  As another example, you may wish
        for ant to use a proxy when downloading (there is a lot to be
        downloaded).   Some examples:
        export ANT_OPTS="-Xms512M -Xmx512M"
        export MAVEN_OPTS="-Xms512M -Xmx512M"
        or
        export ANT_OPTS="-Dhttp.proxyHost=xxx.xxx.xxx.xxx -Dhttp.proxyPort=3128"

        3. Run ant:
        ant         [builds all benchmarks]
        ant dist    [builds all benchmarks, this is the default]
        ant source  [builds a source distribution including benchmarks and tools]
        ant bm      [builds a specific benchmark, bm]

        4. A log of each directory is created under this benchmark directory
        for benchmark build status and build success or failure files
        to be stored.  The directory log directory is normally of the
        form
        ${basedir}/log/${build.time}
        and contains status.txt where each benchmark build status is recorded,
        and either pass.txt if all benchmarks build, or fail.txt if one or
        more benchmarks fail to build. Note: that either fail.txt or pass.txt
        is created when a full build is performed.
</description>

    <property file="local.properties"/>
    <property file="default.properties"/>
    <property file="dacapo.properties"/>
    <property name="log.build.dir" value="${log.dir}/${build.time}"/>
    <property name="log.build.report" value="${log.dir}/${build.time}/status.txt"/>
    <property name="log.build.pass" value="${log.dir}/${build.time}/pass.txt"/>
    <property name="log.build.fail" value="${log.dir}/${build.time}/fail.txt"/>

    <property name="dacapo.build.dir" value="${basedir}/build"/>
	<property name="dacapo.build.doc.dir" value="${dacapo.build.dir}/doc"/>
	<property name="dacapo.doc.dir" value="${basedir}/doc"/>
	<property name="dacapo.src.dir" value="${basedir}/src"/>

    <target name="check-dependencies">
        <fail message="JDK version 8 is required to build DaCapo.  You appear to be using ${java.specification.version} (${java.version}). Please set your path accordingly.">
            <condition>
                <not>
                    <equals arg1="${java.specification.version}" arg2="1.8"/>
                </not>
            </condition>
        </fail>
        <antcall target="check-java11-path"/>

        <!-- Checking the availability of all dependencies -->
        <check.dependency command="git"/>
        <check.dependency command="cvs"/>
        <check.dependency command="svn"/>
        <check.dependency command="python"/>
        <check.dependency command="node"/>
        <check.dependency command="npm"/>

        <antcall target="check-python-modules"/>
    </target>

    <target name="check-java11-path">
        <available property="java11" file="${jdk.11.home}/bin/javac"/>
        <fail unless="java11" message="A valid JDK could not be found in ${jdk.11.home}/bin.   Please check that jdk.11.home is set correctly in your local.properties file."/>

        <exec executable="ant" failifexecutionfails="no" failonerror="yes">
                <env key="JAVA_HOME" value="${jdk.11.home}"/>
                <arg value="check-java11-runtime"/>
            </exec>
    </target>

    <target name="check-java11-runtime">
            <fail message="The JDK specified by jdk.11.home in your local.properties file must point to an installation of Java 11.  You appear to have set jdk.11.home to point to a Java ${java.specification.version} JDK (${jdk.11.home}).  Please set the jdk.11.home variable in your local.properties file accordingly.">
            <condition>
                <not>
                    <equals arg1="${java.specification.version}" arg2="11"/>
                </not>
            </condition>
        </fail>
    </target>

    <macrodef name="check.dependency">
        <attribute name="command"/>
        <sequential>
            <available file="@{command}" filepath="${env.PATH}" type="file" property="@{command}.exist"/>
            <fail unless="@{command}.exist" message="!!! The dependency @{command} could not be found, please re-check !!!"/>
        </sequential>
    </macrodef>

    <target name="check-python-modules">
        <property name="file-name" value="dependency-check.py"/>

        <!-- checking python modules -->
        <exec executable="python" failonerror="yes">
            <arg value="-c"/>
            <arg value="import requests"/>
        </exec>
    </target>

    <target name="check-git-present">
        <available property="git.present" file="../.git" type="dir"/>
        <property name="git.exe" value="git"/>
    </target>

    <target name="extract-git-revision" depends="check-git-present" if="git.present">
        <exec executable="${git.exe}" failonerror="no" failifexecutionfails="no">
            <arg line="show --abbrev-commit HEAD"/>
            <redirector outputproperty="git.hash">
                <outputfilterchain>
                    <linecontainsregexp>
                        <regexp pattern="^commit [a-z0-9]+$"/>
                    </linecontainsregexp>
                    <tokenfilter>
                        <replacestring from="commit " to=""/>
                    </tokenfilter>
                </outputfilterchain>
            </redirector>
        </exec>
    </target>

    <target name="get-git-revision" depends="extract-git-revision" unless="git.hash">
        <!-- set property if not already set -->
        <property name="git.hash" value="unknown"/>
    </target>

    <target name="set-build-version-info" depends="get-git-revision">
        <property name="build.nickname" value="${dacapo.nickname}"/>
        <!-- overwritable with -Dbuild.is-official=true on commandline-->
        <condition property="build.version"
                    value="${dacapo.version}-${dacapo.nickname}"
                    else="${dacapo.version}-git-${git.hash}">
            <isset property="build.is-official"/>
        </condition>
        <!-- set target data directory and jar name -->
        <property name="build.target-dir" value="dacapo-${build.version}"/>
        <property name="build.target-jar" value="dacapo-${build.version}.jar"/>
        <property name="build.target-zip" value="dacapo-${build.version}.zip"/>
    </target>

    <target name="init" depends="check-dependencies, set-build-version-info, create-zip-directory, create-logging-properties">
        <!-- Create the time stamp -->
        <tstamp/>
        <delete dir="${log.build.dir}" />
        <delete dir="${dacapo.build.doc.dir}"/>
        <delete dir="${dacapo.build.dir}" />

        <mkdir dir="${log.build.dir}" />
        <mkdir dir="${dacapo.build.dir}" />
        <mkdir dir="${dacapo.build.doc.dir}"/>
    	
        <echo>build.nickname=${build.nickname}</echo>
        <echo>build.version=${build.version}</echo>
    </target>

    <!-- BEGIN PUBLIC TARGETS -->

    <!-- =================================
         target: source
         ================================= -->
    <target name="source" depends="set-build-version-info">
        <echo file="SOURCE_VERSION.txt">This source distribution was built from DaCapo release ${build.version} "${build.nickname}"${line.separator}</echo>

        <zip destfile="dacapo-${build.version}-src.zip" level="9" whenempty="create">
            <zipfileset dir="${basedir}/.." defaultexcludes="yes" filemode="755">
                <include name="tools/*/bin/**"/>
            </zipfileset>
            <zipfileset dir="${basedir}/.." defaultexcludes="yes">
                <!-- add readme etc -->
               <include name="README.md"/>
               <include name="LICENSE"/>
               <include name="benchmarks/RELEASE_NOTES.md"/>
               <include name="benchmarks/doc/*"/>
               <include name="benchmarks/bms/*/doc/*"/>

                <!-- add source readme indicating where this is from -->
                <include name="benchmarks/SOURCE_VERSION.txt"/>

                <!-- benchmark top level source -->
                <include name="benchmarks/*.xml"/>
                <include name="benchmarks/dacapo.properties"/>
                <include name="benchmarks/default.properties"/>
                <include name="benchmarks/RELEASE_NOTES.txt"/>

                <!-- benchmark harness source -->
                <include name="benchmarks/src/**"/>
                <include name="benchmarks/bms/*/harness/src/**"/>
                <include name="benchmarks/harness/*.xml"/>
                <include name="benchmarks/harness/downloads/**.MD5"/>
                <include name="benchmarks/harness/src/**"/>

                <!-- libs source -->
                <include name="benchmarks/libs/*.xml"/>
                <include name="benchmarks/libs/*/*.xml"/>
                <include name="benchmarks/libs/*/*.patch"/>
                <include name="benchmarks/libs/*/*.pl"/>
                <include name="benchmarks/libs/*/data/**"/>
                <include name="benchmarks/libs/*/downloads/**.MD5"/>
                <include name="benchmarks/libs/*/src/**"/>

                <!-- add benchmark xml -->
                <include name="benchmarks/bms/*.xml"/>

                <!-- add each benchmark -->
                <include name="benchmarks/bms/*/*.cnf"/>
                <include name="benchmarks/bms/*/*.patch"/>
                <include name="benchmarks/bms/*/*.xml"/>
                <include name="benchmarks/bms/*/*.properties"/>
                <include name="benchmarks/bms/*/META-INF/**"/>
                <include name="benchmarks/bms/*/data/**"/>
                <include name="benchmarks/bms/*/downloads/**.MD5"/>
                <include name="benchmarks/bms/*/src/**"/>
                <include name="benchmarks/bms/*/stats-*.yml"/>

                <!-- benchmark-specific includes -->
                <include name="benchmarks/bms/cassandra/workload/**"/>
                <include name="benchmarks/bms/pmd/mvn_toolchain_setup.sh"/>
                <include name="benchmarks/bms/spring/workload/**"/>
                <include name="benchmarks/bms/xalan/workload/**"/>

                <!-- add eclipse's plugin -->
                <include name="benchmarks/bms/eclipse/plugin/META-INF/**"/>
                <include name="benchmarks/bms/eclipse/plugin/src/**"/>
                <include name="benchmarks/bms/eclipse/plugin/*.xml"/>
                <include name="benchmarks/bms/eclipse/plugin/build.properties"/>
                <include name="benchmarks/bms/eclipse/plugin/javaCompiler...args"/>
                <include name="benchmarks/bms/eclipse/bundles-default.lst"/>
                <include name="benchmarks/bms/eclipse/bundles-required.lst"/>
                <include name="benchmarks/bms/eclipse/bundles-stub-required.lst"/>

               <!-- add daytrader plugin -->
                <include name="benchmarks/libs/daytrader/daytrader/**"/>

                <!-- add tools -->
                <include name="tools/**"/>

                <!-- exclude svn -->
                <exclude name="benchmarks/**/.svn"/>

                <!-- exclude defunct benchmarks -->
                <exclude name="benchmarks/bms/antlr/**"/>
                <exclude name="benchmarks/bms/bloat/**"/>
                <exclude name="benchmarks/bms/chart/**"/>
                <exclude name="benchmarks/bms/hsqldb/**"/>
                <exclude name="tools/*/bin/**"/>
            </zipfileset>
        </zip>
    </target>

    <!-- ================================= 
         target: dist              
         ================================= -->
    <target name="dist" depends="harness,bytecode-transformer,compile,create-zip"/>

    <target name="doc" depends="init,bootstrap,harness" description="make the top level documentation"/>

	
    <!-- =================================
         target: bootstrap for running harness
         ================================= -->
    <target name="bootstrap" depends="init">
    	<!-- construct the bootstrap -->
        <javac srcdir="${dacapo.src.dir}" debug="true" debuglevel="lines,vars,source" destdir="${dacapo.build.dir}"/>

    	<!-- set the manifest for the jar -->
        <copy file="${dacapo.src.dir}/META-INF/MANIFEST.MF" todir="${dacapo.build.dir}"/>
        <echo file="${dacapo.build.dir}/MANIFEST.MF" append="yes">Specification-Version: ${build.nickname}${line.separator}</echo>
        <echo file="${dacapo.build.dir}/MANIFEST.MF" append="yes">Implementation-Version: ${build.version}${line.separator}</echo>
        <!-- This is necessary when running cassandra with JAVA >= 9 -->
        <echo file="${dacapo.build.dir}/MANIFEST.MF" append="yes">Add-Exports: java.base/jdk.internal.ref java.base/jdk.internal.misc java.base/jdk.internal.ref java.base/sun.nio.ch java.management.rmi/com.sun.jmx.remote.internal.rmi java.rmi/sun.rmi.registry java.rmi/sun.rmi.server java.sql/java.sql java.base/jdk.internal.math java.base/jdk.internal.module java.base/jdk.internal.util.jar jdk.management/com.sun.management.internal${line.separator}</echo>
        <!-- This is necessary when running h2o with JAVA > 11 -->
        <echo file="${dacapo.build.dir}/MANIFEST.MF" append="yes">Add-Opens: java.base/java.lang java.base/java.lang.module java.base/java.net java.base/jdk.internal.loader java.base/jdk.internal.ref java.base/jdk.internal.reflect java.base/java.io java.base/sun.nio.ch java.base/java.util java.base/java.util.concurrent java.base/java.util.concurrent.atomic java.base/java.nio${line.separator}${line.separator}</echo>
        <!-- <echo file="${dacapo.build.dir}/MANIFEST.MF" append="yes">Add-Opens: java.base/java.lang java.base/java.lang.module java.base/java.net java.base/jdk.internal.loader java.base/jdk.internal.ref java.base/jdk.internal.reflect${line.separator}${line.separator}</echo>
   -->
        <!-- form the top level info -->
        <copy file="${basedir}/../LICENSE" todir="${dacapo.build.dir}"/>
        <copy file="${basedir}/../README.md" todir="${dacapo.build.dir}"/>
        <copy file="${basedir}/RELEASE_NOTES.md" todir="${dacapo.build.dir}"/>

    	<!-- this forms the base document section -->
        <copy file="${basedir}/../LICENSE" todir="${dacapo.build.doc.dir}"/>
        <copy file="${basedir}/../README.md" todir="${dacapo.build.doc.dir}"/>
		<copy file="${basedir}/RELEASE_NOTES.md" todir="${dacapo.build.doc.dir}" />

		<copy todir="${dacapo.build.doc.dir}">
			<fileset dir="${dacapo.doc.dir}"/>
		</copy>

    	<!-- construct the base jar -->
        <condition property="update-value" value="true" else="false">
            <isset property="update-jar"/>
        </condition>

        <jar jarfile="${build.target-jar}" basedir="${dacapo.build.dir}" update="${update-value}" manifest="${dacapo.build.dir}/MANIFEST.MF" excludes="MANIFEST.MF"/>

    </target>

    <target name="clean-bootstrap" depends="init">
        <delete dir="${dacapao.build.doc.dir}"/>
        <delete dir="${dacapao.build.dir}"/>
        <delete dir="${dacapao.out.jar.dir}"/>
    </target>

    <!-- ================================= 
         target: compile  all sources
         ================================= -->
    <target name="compile" depends="avrora,batik,biojava,cassandra,eclipse,fop,graphchi,h2,h2o,jme,jython,kafka,luindex,lusearch,pmd,spring,sunflow,tomcat,tradebeans,tradesoap,xalan,zxing">
        <antcall target="build.status.fail" />
        <antcall target="build.status.pass" />
    </target>
	

    <property name="mvn-home" location="${toolsdir}/apache-maven-${mvn.version}/bin"/>
    <property name="mvn-exe" value="${mvn-home}/mvn"/>
    <condition property="mvn-exe" value="${mvn-home}/mvn.bat">
        <os family="windows"/>
    </condition>

    <!-- ================================= 
         target: harness           
         ================================= -->
    <target name="harness" depends="bytecode-transformer" description="build harness and bytecode transformer"/>

    <property name="bcc-dir" value="${toolsdir}/analysis/bcc"/>

    <target name="harness-jar" depends="init,bootstrap" description="compile harness and create jar for use by maven when compiling bytecode transformer">
        <ant antfile="harness/build.xml"/>
        <jar destfile="${bcc-dir}/dacapo-harness.jar" basedir="harness/dist" update="true"/>
    </target>

    <target name="clean-harness" depends="init">
        <ant antfile="harness/build.xml" target="clean"/>
    </target>

    <target name="bytecode-transformer" depends="harness-jar">
        <exec executable="${mvn-exe}" dir="${bcc-dir}" failonerror="true">
            <env key="JAVA_HOME" value="${jdk.11.home}"/>
            <arg line="install"/>
        </exec>
        <copy file="${toolsdir}/analysis/bcc/target/BCCAgent-1.0-SNAPSHOT.jar" tofile="${build.target-jars}/bccagent.jar"/>
    </target>

    <!-- *************************************************************************** -->
    <!--                            Clean                                            -->
    <!-- *************************************************************************** -->

    <macrodef name="clean.lib">
        <attribute name="library"/>
        <sequential>
            <exec executable="ant" failifexecutionfails="no" failonerror="no" resultproperty="clean-@{library}-status">
                <arg value="-Dtoolsdir=${toolsdir}"/>
                <arg value="-Dbuild.time=${build.time}"/>
                <arg value="-Dlog.build.dir=${log.build.dir}"/>
                <arg value="-buildfile"/>
                <arg value="libs/@{library}/build.xml"/>
                <arg value="clean"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="clean.bm">
        <attribute name="benchmark"/>
        <sequential>
            <exec executable="ant" failifexecutionfails="no" failonerror="no" resultproperty="clean-@{benchmark}-status">
                <arg value="-Dtoolsdir=${toolsdir}"/>
                <arg value="-Dbuild.time=${build.time}"/>
                <arg value="-Dlog.build.dir=${log.build.dir}"/>
                <arg value="-buildfile"/>
                <arg value="bms/@{benchmark}/build.xml"/>
                <arg value="clean"/>
            </exec>
        </sequential>
    </macrodef>

    <target name="clean-libs" depends="init">
        <clean.lib library="asm"/>
        <clean.lib library="bcel"/>
        <clean.lib library="batik"/>
        <clean.lib library="commons-beanutils"/>
        <clean.lib library="commons-codec"/>
        <clean.lib library="commons-collections"/>
        <clean.lib library="commons-httpclient"/>
        <clean.lib library="commons-lang"/>
        <clean.lib library="commons-logging"/>
        <clean.lib library="dacapo-digest"/>
        <clean.lib library="daytrader"/>
        <clean.lib library="derby"/>
        <clean.lib library="h2"/>
        <clean.lib library="janino"/>
        <clean.lib library="json"/>
        <clean.lib library="junit"/>
        <clean.lib library="lucene"/>
        <clean.lib library="xerces"/>
        <clean.lib library="ezmorph"/>
    </target>

    <target name="clean-benchmarks" depends="init">
        <clean.bm benchmark="avrora"/>
        <clean.bm benchmark="batik"/>
        <clean.bm benchmark="biojava"/>
        <clean.bm benchmark="cassandra"/>
        <clean.bm benchmark="eclipse"/>
        <clean.bm benchmark="fop"/>
        <clean.bm benchmark="graphchi"/>
        <clean.bm benchmark="h2"/>
        <clean.bm benchmark="h2o"/>
        <clean.bm benchmark="jme"/>
        <clean.bm benchmark="jython"/>
        <clean.bm benchmark="kafka"/>
        <clean.bm benchmark="luindex"/>
        <clean.bm benchmark="lusearch"/>
        <clean.bm benchmark="pmd"/>
        <clean.bm benchmark="spring"/>
        <clean.bm benchmark="sunflow"/>
        <clean.bm benchmark="tomcat"/>
        <clean.bm benchmark="tradebeans"/>
        <clean.bm benchmark="tradesoap"/>
        <clean.bm benchmark="xalan"/>
        <clean.bm benchmark="zxing"/>
    </target>

    <target name="clean" depends="clean-benchmarks,clean-libs,clean-harness,clean-bootstrap"/>
  
    <!-- *************************************************************************** -->
    <!--                            Build                                            -->
    <!-- *************************************************************************** -->
    <target name="build.status.fail" if="build.failed">
        <echo level="error">
build: FAIL
See ${log.build.report} for a summary of benchmark build status.
    </echo>
        <echo file="${log.build.fail}" level="error" message="build: FAIL${line.separator}"/>
    </target>

    <target name="build.status.pass" unless="build.failed">
        <echo level="error" message="build: PASS${line.separator}"/>
        <echo file="${log.build.pass}" level="error" message="build: PASS${line.separator}"/>
    </target>

    <macrodef name="build.bm">
        <attribute name="benchmark"/>
        <attribute name="env.key" default=""/>
        <attribute name="env.value" default=""/>
        <sequential>
            <exec executable="ant" failifexecutionfails="no" failonerror="no" resultproperty="@{benchmark}-status">
                <env key="@{env.key}" value="@{env.value}"/>
                <arg value="-Dtoolsdir=${toolsdir}"/>
                <arg value="-Dbuild.time=${build.time}"/>
                <arg value="-Dlog.build.dir=${log.build.dir}"/>
                <arg value="-Dbuild.target-jar=${build.target-jar}"/>
                <arg value="-Dbuild.target-jars=${build.target-jars}"/>
                <arg value="-Dbuild.target-data=${build.target-data}"/>
                <arg value="-buildfile"/>
                <arg value="bms/@{benchmark}/build.xml"/>
                <arg value="incremental"/>
            </exec>
            <condition property="@{benchmark}.failed">
                <isfailure code="${@{benchmark}-status}"/>
            </condition>
            <condition property="@{benchmark}.message" value="FAIL" else="PASS">
                <isset property="@{benchmark}.failed"/>
            </condition>
            <condition property="build.failed">
                <and>
                    <not>
                        <isset property="build.failed"/>
                    </not>
                    <isset property="@{benchmark}.failed"/>
                </and>
            </condition>
            <echo level="error" message="@{benchmark}: ${@{benchmark}.message}${line.separator}"/>
            <echo file="${log.build.report}" append="true" level="error" message="@{benchmark}: ${@{benchmark}.message}${line.separator}"/>
            <fail message="@{benchmark}: FAIL">
                <condition>
                    <and>
                        <istrue value="${build.failonerror}"/>
                        <isset property="@{benchmark}.failed"/>
                    </and>
                </condition>
            </fail>
            <!-- <antcall target="update-externdata-md5"/> -->
        </sequential>
    </macrodef>

    <target name="avrora" depends="init,harness">
        <build.bm benchmark="avrora"/>
    </target>
    <target name="batik" depends="init,harness">
        <build.bm benchmark="batik"/>
    </target>
    <target name="biojava" depends="init,harness">
        <build.bm benchmark="biojava"/>
    </target>
    <target name="cassandra" depends="init,harness">
        <build.bm benchmark="cassandra"/>
    </target>
    <target name="daytrader" depends="tradebeans, tradesoap"/>
    <target name="eclipse" depends="init,harness">
        <build.bm benchmark="eclipse"/>
    </target>
    <target name="fop" depends="init,harness">
        <build.bm benchmark="fop"/>
    </target>
    <target name="graphchi" depends="init,harness">
        <build.bm benchmark="graphchi"/>
    </target>
    <target name="h2" depends="init,harness">
        <build.bm benchmark="h2"/>
    </target>
    <target name="h2o" depends="init,harness">
        <build.bm benchmark="h2o"/>
    </target>
    <target name="jme" depends="init,harness">
        <build.bm benchmark="jme"/>
    </target>
    <target name="jython" depends="init,harness">
        <build.bm benchmark="jython"/>
    </target>
    <target name="kafka" depends="init,harness">
        <build.bm benchmark="kafka"/>
    </target>
   <target name="luindex" depends="init,harness">
        <build.bm benchmark="luindex"/>
    </target>
    <target name="lusearch" depends="init,harness">
        <build.bm benchmark="lusearch"/>
    </target>
    <target name="pmd" depends="init,harness">
        <build.bm benchmark="pmd"/>
    </target>
    <target name="spring" depends="init,harness">
        <build.bm benchmark="spring"/>
    </target>
    <target name="sunflow" depends="init,harness">
        <build.bm benchmark="sunflow"/>
    </target>
    <target name="tomcat" depends="init,harness">
        <build.bm benchmark="tomcat"/>
    </target>
    <target name="tradebeans" depends="init,harness">
        <build.bm benchmark="tradebeans"/>
    </target>
    <target name="tradesoap" depends="init,harness">
        <build.bm benchmark="tradesoap"/>
    </target>
    <target name="xalan" depends="init,harness">
        <build.bm benchmark="xalan"/>
    </target>
    <target name="zxing" depends="init,harness">
        <build.bm benchmark="zxing"/>
    </target>

    <target name="set-delete-zip-dir-property">
        <available file="${build.target-dir}" property="delete-zip-dir"/>
        <echo message="In SDZ ${build.target-dir}-${delete-zip-dir}-"/>
    </target>

    <target name="delete-zip-directory" if="${delete-zip-dir}">
        <chmod perm="u+w">
            <dirset dir="${build.target-dir}"/>
        </chmod>
        <delete dir="${build.target-dir}"/>
    </target>

    <target name="create-logging-properties">
        <echo message=".level=OFF" file="${build.target-data}/logging.properties"/>
    </target>

    <target name="create-zip-directory" depends="set-build-version-info,set-delete-zip-dir-property,delete-zip-directory">
        <property name="build.target-jars" value="${build.target-dir}/jar"/>
        <property name="build.target-data" value="${build.target-dir}/dat"/>

        <mkdir dir="${build.target-jars}"/>
        <mkdir dir="${build.target-data}"/>
    </target>

    <target name="generate-launcher-jars">
        <property name="build.target-launchers" value="${build.target-dir}/launchers"/>
        <mkdir dir="${build.target-launchers}"/>

        <exec executable="python" failifexecutionfails="yes" failonerror="yes">
            <arg value="LauncherGenerator.py"/>
            <arg value="Harnes"/>
            <arg value="${build.target-jar}"/>
            <arg value="${build.target-launchers}"/>
        </exec>
    </target>

    <target name="create-zip" depends="set-build-version-info">
        <zip destfile="${build.target-zip}">
            <zipfileset dir="." includes="${build.target-dir}/**" excludes="${build.target-dir}/**/jboss-cli.sh ${build.target-dir}/**/jboss-cli.bat"/>
            <zipfileset dir="." includes="${build.target-dir}/**/jboss-cli.sh ${build.target-dir}/**/jboss-cli.bat" filemode="755" />
            <zipfileset file="${build.target-jar}"/>
        </zip>
    </target>

</project>
