diff '--color=auto' -ur h2database-version-1.4.197/h2/src/main/org/h2/util/StringUtils.java ../build/h2database-version-1.4.197/h2/src/main/org/h2/util/StringUtils.java
--- h2database-version-1.4.197/h2/src/main/org/h2/util/StringUtils.java	2018-03-18 19:28:29.000000000 +0000
+++ ../build/h2database-version-1.4.197/h2/src/main/org/h2/util/StringUtils.java	2024-09-24 11:36:34.189042674 +0000
@@ -12,6 +12,7 @@
 import java.util.Arrays;
 import java.util.Locale;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicReferenceArray;
 
 import org.h2.api.ErrorCode;
 import org.h2.engine.SysProperties;
@@ -33,12 +34,10 @@
     // 4 * 1024 * 2 (strings per pair) * 64 * 2 (bytes per char) = 0.5 MB
     private static final int TO_UPPER_CACHE_LENGTH = 2 * 1024;
     private static final int TO_UPPER_CACHE_MAX_ENTRY_LENGTH = 64;
-    private static final String[][] TO_UPPER_CACHE = new String[TO_UPPER_CACHE_LENGTH][];
+    private static final AtomicReferenceArray<String[]> TO_UPPER_CACHE = new AtomicReferenceArray<>(TO_UPPER_CACHE_LENGTH);
 
     static {
-        for (int i = 0; i < HEX_DECODE.length; i++) {
-            HEX_DECODE[i] = -1;
-        }
+        Arrays.fill(HEX_DECODE, -1);
         for (int i = 0; i <= 9; i++) {
             HEX_DECODE[i + '0'] = i;
         }
@@ -88,15 +87,14 @@
             return s.toUpperCase(Locale.ENGLISH);
         }
         int index = s.hashCode() & (TO_UPPER_CACHE_LENGTH - 1);
-        String[] e = TO_UPPER_CACHE[index];
+        String[] e = TO_UPPER_CACHE.get(index);
         if (e != null) {
             if (e[0].equals(s)) {
                 return e[1];
             }
         }
         String s2 = s.toUpperCase(Locale.ENGLISH);
-        e = new String[] { s, s2 };
-        TO_UPPER_CACHE[index] = e;
+        TO_UPPER_CACHE.compareAndSet(index, e, new String[] { s, s2 });
         return s2;
     }
 
@@ -407,7 +405,7 @@
      */
     public static String urlEncode(String s) {
         try {
-            return URLEncoder.encode(s, "UTF-8");
+            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
         } catch (Exception e) {
             // UnsupportedEncodingException
             throw DbException.convert(e);
