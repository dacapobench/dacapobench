<?xml version="1.0" encoding="UTF-8"?>
<project name="org.dacapo.eclipse" default="build.jars" basedir=".">

    <property name="p2.build.repo" value="file:${buildDirectory}/buildRepo"/>
    <property name="basews" value="${ws}"/>
    <property name="baseos" value="${os}"/>
    <property name="basearch" value="${arch}"/>
    <property name="basenl" value="${nl}"/>
    <property name="bundleId" value="org.dacapo.eclipse"/>
    <property name="bundleVersion" value="1.0.0"/>
    <property name="p2.publishonerror" value="false"/>

    <!-- Compiler settings. -->
    <property name="javacFailOnError" value="false"/>
    <property name="javacDebugInfo" value="on"/>
    <property name="javacVerbose" value="false"/>
    <property name="logExtension" value=".log"/>
    <property name="compilerArg" value=""/>
    <property name="javacSource" value="1.3"/>
    <property name="javacTarget" value="1.2"/>
    <condition property="dir_bootclasspath" value="${java.home}/../Classes">
        <os family="mac"/>
    </condition>
    <property name="dir_bootclasspath" value="${java.home}/lib"/>
    <path id="path_bootclasspath">
        <fileset dir="${dir_bootclasspath}">
            <include name="*.jar"/>
        </fileset>
    </path>
    <property name="bootclasspath" refid="path_bootclasspath"/>
    <condition property="bundleBootClasspath" value="${J2SE-1.5}"    >
        <isset property="J2SE-1.5"/>
    </condition>
    <condition property="bundleJavacSource" value="1.5"    >
        <isset property="J2SE-1.5"/>
    </condition>
    <condition property="bundleJavacTarget" value="1.5"    >
        <isset property="J2SE-1.5"/>
    </condition>
    <property name="bundleJavacSource" value="${javacSource}"/>
    <property name="bundleJavacTarget" value="${javacTarget}"/>
    <property name="bundleBootClasspath" value="${bootclasspath}"/>

    <target name="init" depends="properties">
        <condition property="pluginTemp" value="${buildTempFolder}/plugins"        >
            <isset property="buildTempFolder"/>
        </condition>
        <property name="pluginTemp" value="${basedir}"/>
        <condition property="build.result.folder" value="${pluginTemp}/org.dacapo.eclipse_1.0.0"        >
            <isset property="buildTempFolder"/>
        </condition>
        <property name="build.result.folder" value="${basedir}"/>
        <property name="temp.folder" value="${basedir}/temp.folder"/>
        <property name="plugin.destination" value="${basedir}"/>
        <condition property="p2.publish.parts" value="true"        >
            <istrue value="${p2.gathering}"/>
        </condition>
        <property name="compilation.problem.marker" value="${build.result.folder}/compilation.problem"/>
        <condition property="compilation.problem.marker.exists" value="true"        >
            <and>
            <available file="${compilation.problem.marker}"/>
            <isfalse value="p2.publishonerror"/>
            </and>
        </condition>
    </target>

    <target name="properties" if="eclipse.running">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>

    </target>

    <target name="build.update.jar" depends="init" description="Build the plug-in: org.dacapo.eclipse for an update site.">
        <delete dir="${temp.folder}"/>
        <mkdir dir="${temp.folder}"/>
        <antcall target="build.jars"/>
        <antcall target="gather.bin.parts">
            <param name="destination.temp.folder" value="${temp.folder}/"/>
        </antcall>
        <jar destfile="${plugin.destination}/org.dacapo.eclipse_1.0.0.jar" basedir="${temp.folder}/org.dacapo.eclipse_1.0.0" filesetmanifest="merge"/>
        <delete dir="${temp.folder}"/>
    </target>

    <target name="@dot" depends="init" unless="@dot" description="Create jar: org.dacapo.eclipse @dot.">
        <delete dir="${build.result.folder}/@dot"/>
        <mkdir dir="${build.result.folder}/@dot"/>
        <path id="@dot.classpath">
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.runtime_3.5.0.v20090525.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.osgi_3.5.1.R35x_v20090827.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.equinox.common_3.5.1.R35x_v20090807-1100.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.jobs_3.4.100.v20090429-1800.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.runtime.compatibility.registry_3.2.200.v20090429-1800/runtime_registry_compatibility.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.runtime.compatibility.registry_3.2.200.v20090429-1800"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.equinox.registry_3.4.100.v20090520-1800.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.equinox.preferences_3.2.300.v20090520-1800.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.contenttype_3.4.1.R35x_v20090826-0451.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.runtime.compatibility.auth_3.2.100.v20090413.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.equinox.app_1.2.0.v20090520-1800.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.osgi.services_3.2.0.v20090520-1800.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/javax.servlet_2.5.0.v200806031605.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.jdt.core_3.5.1.v_972_R35x.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.jdt.compiler.apt_1.0.201.R35x_v20090825-1530.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.jdt.compiler.tool_1.0.100.v_972_R35x.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.resources_3.5.1.R35x_v20090826-0451.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.resources.compatibility_3.4.0.v20090505.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.ant.core_3.2.100.v20090817_r351.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.variables_3.2.200.v20090521.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.expressions_3.4.100.v20090429-1800.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.filesystem_1.2.0.v20090507.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.filesystem.macosx_1.1.0.v20090112.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.text_3.5.0.v20090513-2000.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/com.ibm.icu_4.0.1.v20090822.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.core.commands_3.5.0.I20090525-2000.jar"/>
            <pathelement path="${basedir}/../build/eclipse/plugins/org.eclipse.team.core_3.5.0.I20090527-0620.jar"/>
        </path>
        <!-- compile the source code -->
        <javac destdir="${build.result.folder}/@dot" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}"        >
            <compilerarg line="${compilerArg}" compiler="${build.compiler}"/>
            <classpath refid="@dot.classpath" />
            <src path="src/"            />
            <compilerarg value="@${basedir}/javaCompiler...args" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/>
            <compilerarg line="-log '${build.result.folder}/@dot${logExtension}'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        </javac>
        <antcall target="checkCompilationResults"/>
        <!-- Copy necessary resources -->
        <copy todir="${build.result.folder}/@dot" failonerror="true" overwrite="false">
            <fileset dir="src/">
                <exclude name="**/*.java"/>
                <exclude name="**/package.htm*"/>
            </fileset>
        </copy>
    </target>

    <target name="src.zip" depends="init" unless="src.zip">
        <mkdir dir="${build.result.folder}"/>
        <antcall target="zip.src.zip"/>
    </target>
    <target name="zip.src.zip">
        <zip destfile="${build.result.folder}/src.zip" filesonly="false" whenempty="skip" update="false">
            <fileset dir="src/">
                <include name="**/*.java"/>
            </fileset>
        </zip>
    </target>
    <target name="copy.src.zip">
        <copy todir="${source.destination.folder}/" failonerror="true" overwrite="true">
            <fileset dir="src/">
                <include name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <target name="build.jars" depends="init" description="Compile classes and build nested jars for the plug-in: org.dacapo.eclipse.">
        <delete file="${compilation.problem.marker}" quiet="true"/>
        <available property="@dot" file="${build.result.folder}/@dot"/>
        <antcall target="@dot"/>
    </target>

    <target name="checkCompilationResults" if="compilation.error.occured">
        <echo file="${compilation.problem.marker}" message="org.dacapo.eclipse : compilation.error.occured=${compilation.error.occured}"/>
    </target>

    <target name="build.sources" depends="init">
        <available property="src.zip" file="${build.result.folder}/src.zip"/>
        <antcall target="src.zip"/>
    </target>

    <target name="publish.bin.parts" depends="init" if="p2.publish.parts" unless="compilation.problem.marker.exists">
        <mkdir dir="${build.result.folder}/org.dacapo.eclipse_1.0.0"/>
        <copy todir="${build.result.folder}" failonerror="true" overwrite="true">
            <fileset dir="${basedir}">
                <include name="META-INF/MANIFEST.MF"/>
                <include name="plugin.xml"/>
                <include name="fragment.xml"/>
            </fileset>
        </copy>
        <antcall target="apitools.generation">
            <param name="target.folder" value="${build.result.folder}"/>
            <param name="projectLocation" value="${basedir}"/>
            <param name="projectName" value="${bundleId}_${bundleVersion}"/>
            <param name="binary.folders" value="${build.result.folder}/@dot"/>
        </antcall>
        <eclipse.gatherBundle 
           metadataRepository="${p2.build.repo}"
           artifactRepository="${p2.build.repo}"
           buildResultFolder="${build.result.folder}"
           baseDirectory="${basedir}"
        />
    </target>

    <target name="gather.bin.parts" depends="init" if="destination.temp.folder">
        <mkdir dir="${destination.temp.folder}/org.dacapo.eclipse_1.0.0"/>
        <copy todir="${destination.temp.folder}/org.dacapo.eclipse_1.0.0" failonerror="true" overwrite="false">
            <fileset dir="${build.result.folder}/@dot">
                <include name="**"/>
            </fileset>
        </copy>
        <copy todir="${destination.temp.folder}/org.dacapo.eclipse_1.0.0" failonerror="true" overwrite="true">
            <fileset dir="${basedir}">
                <include name="META-INF/"/>
                <include name="plugin.xml"/>
                <include name="bin/"/>
            </fileset>
        </copy>
        <antcall target="apitools.generation">
            <param name="target.folder" value="${destination.temp.folder}/org.dacapo.eclipse_1.0.0"/>
            <param name="projectLocation" value="${basedir}"/>
            <param name="projectName" value="${bundleId}_${bundleVersion}"/>
            <param name="binary.folders" value="${build.result.folder}/@dot"/>
        </antcall>
    </target>

    <target name="build.zips" depends="init">
    </target>

    <target name="gather.sources" depends="init" if="destination.temp.folder">
        <mkdir dir="${destination.temp.folder}/org.dacapo.eclipse_1.0.0"/>
        <copy file="${build.result.folder}/src.zip" todir="${destination.temp.folder}/org.dacapo.eclipse_1.0.0" failonerror="false" overwrite="false"/>
        <antcall target="copy.src.includes">
            <param name="source.destination.folder" value="${destination.temp.folder}/org.dacapo.eclipse_1.0.0"/>
        </antcall>
    </target>

    <target name="gather.individual.sources" depends="init">
        <antcall target="copy.src.zip">
            <param name="source.destination.folder" value="${destination.temp.folder}"/>
        </antcall>
        <antcall target="copy.src.includes">
            <param name="source.destination.folder" value="${destination.temp.folder}"/>
        </antcall>
    </target>

    <target name="copy.src.includes" depends="init">
    </target>

    <target name="gather.logs" depends="init" if="destination.temp.folder">
        <mkdir dir="${destination.temp.folder}/org.dacapo.eclipse_1.0.0"/>
        <copy todir="${destination.temp.folder}/org.dacapo.eclipse_1.0.0" failonerror="false" overwrite="false">
            <fileset dir="${build.result.folder}">
                <include name="@dot${logExtension}"/>
            </fileset>
        </copy>
    </target>

    <target name="clean" depends="init" description="Clean the plug-in: org.dacapo.eclipse of all the zips, jars and logs created.">
        <delete dir="${build.result.folder}/@dot"/>
        <delete file="${build.result.folder}/src.zip"/>
        <delete file="${plugin.destination}/org.dacapo.eclipse_1.0.0.jar"/>
        <delete file="${plugin.destination}/org.dacapo.eclipse_1.0.0.zip"/>
        <delete dir="${temp.folder}"/>
        <delete file="${compilation.problem.marker}" quiet="true"/>
    </target>

    <target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
        <eclipse.convertPath fileSystemPath="/Users/steveb/devel/dacapo/svn/dacapo/benchmarks/bms/eclipse/plugin" property="resourcePath"/>
        <eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
    </target>

    <target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: org.dacapo.eclipse.">
        <delete dir="${temp.folder}"/>
        <mkdir dir="${temp.folder}"/>
        <antcall target="build.jars"/>
        <antcall target="build.sources"/>
        <antcall target="gather.bin.parts">
            <param name="destination.temp.folder" value="${temp.folder}/"/>
        </antcall>
        <antcall target="gather.sources">
            <param name="destination.temp.folder" value="${temp.folder}/"/>
        </antcall>
        <delete>
            <fileset dir="${temp.folder}">
                <include name="**/*.bin${logExtension}"/>
            </fileset>
        </delete>
        <zip destfile="${plugin.destination}/org.dacapo.eclipse_1.0.0.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false"/>
        <delete dir="${temp.folder}"/>
    </target>

    <target name="apitools.generation" if="generateAPIDescription">
        <apitooling.apigeneration  projectName="${projectName}" project="${projectLocation}" binary="${binary.folders}" target="${target.folder}"        />
    </target>

</project>
