/* Generated By:JavaCC: Do not edit this line. CppParserTokenManager.java */
package net.sourceforge.pmd.lang.cpp.ast;
import net.sourceforge.pmd.lang.ast.CharStream;
import net.sourceforge.pmd.lang.ast.TokenMgrError;

/** Token Manager. */
public class CppParserTokenManager extends net.sourceforge.pmd.lang.ast.AbstractTokenManager implements CppParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x5ffffffffffff80L) != 0L)
         {
            jjmatchedKind = 140;
            return 27;
         }
         if ((active0 & 0x200000000L) != 0L || (active1 & 0x28L) != 0L)
            return 1;
         return -1;
      case 1:
         if ((active1 & 0x5fffffffdfcff80L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 140;
               jjmatchedPos = 1;
            }
            return 27;
         }
         if ((active1 & 0x2030000L) != 0L)
            return 27;
         return -1;
      case 2:
         if ((active1 & 0x200028400000L) != 0L)
            return 27;
         if ((active1 & 0x5ffdfffd5beff80L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 2;
            return 27;
         }
         return -1;
      case 3:
         if ((active1 & 0x5bbcfffc4b2f500L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 3;
            return 27;
         }
         if ((active1 & 0x441000110c0a80L) != 0L)
            return 27;
         return -1;
      case 4:
         if ((active1 & 0x42b4defc492e000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 4;
            return 27;
         }
         if ((active1 & 0x190821000201500L) != 0L)
            return 27;
         return -1;
      case 5:
         if ((active1 & 0x42b4806c0006000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 5;
            return 27;
         }
         if ((active1 & 0x5e904928000L) != 0L)
            return 27;
         return -1;
      case 6:
         if ((active1 & 0x29080680002000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 6;
            return 27;
         }
         if ((active1 & 0x402400040004000L) != 0L)
            return 27;
         return -1;
      case 7:
         if ((active1 & 0x280000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 7;
            return 27;
         }
         if ((active1 & 0x29080400002000L) != 0L)
            return 27;
         return -1;
      case 8:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 140;
            jjmatchedPos = 8;
            return 27;
         }
         if ((active1 & 0x80000000L) != 0L)
            return 27;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L);
      case 33:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 35:
         return jjStopAtPos(0, 8);
      case 37:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 38:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x440000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 26);
      case 41:
         return jjStopAtPos(0, 27);
      case 42:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 43:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x8000004000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 31);
      case 45:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x51L);
      case 46:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x20L);
      case 47:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x10000000c0L, 0x0L);
      case 58:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 59:
         return jjStopAtPos(0, 30);
      case 60:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x140010000000000L, 0x0L);
      case 61:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x280020000000000L, 0x0L);
      case 63:
         return jjStopAtPos(0, 32);
      case 64:
         return jjStopAtPos(0, 121);
      case 91:
         return jjStopAtPos(0, 24);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x600L, 0x0L);
      case 93:
         return jjStopAtPos(0, 25);
      case 94:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000003e00L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c0000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x480000000e00000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c0000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x5f000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x140780000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe000000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L);
      case 123:
         return jjStopAtPos(0, 22);
      case 124:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 23);
      case 126:
         return jjStopAtPos(0, 65);
      default :
         return jjMoveNfa_0(25, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         else if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 13:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L);
      case 38:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 43:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 45:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 58:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 60:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 61:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         break;
      case 62:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000600L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80e2000c000L);
      case 102:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 89, 27);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x110101000000800L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x402006000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000240000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x180000c080000L);
      case 111:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000011423000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x402000c0800100L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000080L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000000L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000000L);
      case 124:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(2, 9);
         break;
      case 42:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(2, 70);
         break;
      case 46:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(2, 33);
         break;
      case 61:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 41);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x28000000800L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000100L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2400000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x14940040800000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x88000004008000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000010003000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1080200000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000L);
      case 114:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 86, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x102010000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000040200L);
      case 116:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 27);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x801100480L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000a0000L);
      case 119:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(2, 93, 27);
         break;
      case 121:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 109, 27);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active1, 0x408000000204100L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active1, 0x20000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active1, 0x400L);
      case 100:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 27);
         break;
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 27);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 27);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 118, 27);
         return jjMoveStringLiteralDfa4_0(active1, 0x404200908000L);
      case 103:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active1, 0x1000404000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active1, 0x10000100000000L);
      case 109:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 83, 27);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active1, 0x2000000000L);
      case 111:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 27);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 27);
         return jjMoveStringLiteralDfa4_0(active1, 0x100800000000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active1, 0x80000000000L);
      case 114:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 27);
         return jjMoveStringLiteralDfa4_0(active1, 0x20001000000000L);
      case 115:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 27);
         return jjMoveStringLiteralDfa4_0(active1, 0x80020000001000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active1, 0x2048080002000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active1, 0x10800000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active1, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, active1);
}
private int jjMoveStringLiteralDfa4_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(2, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, 0L, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active1, 0x20000040000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active1, 0x50200000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active1, 0x400000000000L);
      case 101:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 116, 27);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 119, 27);
         return jjMoveStringLiteralDfa5_0(active1, 0x2080000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active1, 0x1000000000000L);
      case 104:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 74, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active1, 0x8100002000L);
      case 107:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 27);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active1, 0x400080000020000L);
      case 110:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 27);
         return jjMoveStringLiteralDfa5_0(active1, 0x4800000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active1, 0x4000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active1, 0x800100000L);
      case 115:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 105, 27);
         return jjMoveStringLiteralDfa5_0(active1, 0x400000000L);
      case 116:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 27);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 27);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 27);
         return jjMoveStringLiteralDfa5_0(active1, 0x8000000008000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active1, 0x2000000004000L);
      case 119:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 120, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, 0L, active1);
}
private int jjMoveStringLiteralDfa5_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(3, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active1, 0x2080000000000L);
      case 99:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 27);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 27);
         return jjMoveStringLiteralDfa6_0(active1, 0x80000000L);
      case 100:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 27);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 27);
         break;
      case 101:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 27);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 27);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 90, 27);
         return jjMoveStringLiteralDfa6_0(active1, 0x400000000000L);
      case 102:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 102, 27);
         break;
      case 104:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 27);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active1, 0x8000000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active1, 0x400000200004000L);
      case 110:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 27);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 27);
         return jjMoveStringLiteralDfa6_0(active1, 0x1000000002000L);
      case 116:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 27);
         return jjMoveStringLiteralDfa6_0(active1, 0x20000440000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(4, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active1, 0x200000000L);
      case 101:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 94, 27);
         return jjMoveStringLiteralDfa7_0(active1, 0x1000400000000L);
      case 102:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 110, 27);
         break;
      case 108:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 113, 27);
         return jjMoveStringLiteralDfa7_0(active1, 0x8000000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x20000000000000L);
      case 116:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 27);
         return jjMoveStringLiteralDfa7_0(active1, 0x80080000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x2000L);
      case 121:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 122, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(5, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 112, 27);
         break;
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 27);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 107, 27);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 115, 27);
         return jjMoveStringLiteralDfa8_0(active1, 0x80000000L);
      case 114:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 98, 27);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 117, 27);
         return jjMoveStringLiteralDfa8_0(active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(6, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 95, 27);
         break;
      case 101:
         return jjMoveStringLiteralDfa9_0(active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1);
      return 9;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 97, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 76;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 36)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(27);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 39)
                     jjCheckNAddStates(9, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAddStates(12, 19);
                  }
                  else if (curChar == 48)
                     jjAddStates(20, 23);
                  if (curChar == 48)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddStates(24, 31);
                  }
                  break;
               case 0:
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(32, 34);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if (curChar == 39)
                     jjCheckNAddStates(9, 11);
                  break;
               case 7:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 9:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 10:
                  if (curChar == 39 && kind > 137)
                     kind = 137;
                  break;
               case 11:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  break;
               case 12:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 14:
                  if ((0xffffffffffffdfffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 15:
                  if (curChar == 34 && kind > 138)
                     kind = 138;
                  break;
               case 16:
                  if (curChar == 10)
                     jjCheckNAddStates(6, 8);
                  break;
               case 17:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 40)
                     jjCheckNAddStates(35, 37);
                  break;
               case 19:
                  if ((0xfffffdffffffffffL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 20:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(35, 37);
                  break;
               case 22:
                  if (curChar == 34 && kind > 139)
                     kind = 139;
                  break;
               case 23:
                  if (curChar == 41)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 26:
                  if (curChar != 36)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (curChar != 48)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(24, 31);
                  break;
               case 29:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 39:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAddStates(12, 19);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(40);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 50:
                  if (curChar == 48)
                     jjAddStates(20, 23);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjAddStates(44, 45);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(46, 47);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(48, 50);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if (curChar != 46)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(51, 53);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 135)
                     kind = 135;
                  jjCheckNAddStates(51, 53);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 0);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 72:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(73, 74);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(27);
                  }
                  if (curChar == 76)
                     jjAddStates(54, 55);
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 5:
                  if ((0x104000001040L & l) != 0L && kind > 135)
                     kind = 135;
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 8:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  jjCheckNAddStates(9, 11);
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 13:
                  if (curChar == 92)
                     jjCheckNAddStates(58, 60);
                  break;
               case 14:
                  jjCheckNAddStates(6, 8);
                  break;
               case 19:
               case 21:
                  jjCheckNAddStates(35, 37);
                  break;
               case 26:
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(27);
                  break;
               case 31:
                  if ((0x100000001000L & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 33:
                  if ((0x20000000200000L & l) != 0L && kind > 125)
                     kind = 125;
                  break;
               case 35:
                  if ((0x100000001000L & l) != 0L && kind > 126)
                     kind = 126;
                  break;
               case 36:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if ((0x20000000200000L & l) != 0L && kind > 126)
                     kind = 126;
                  break;
               case 38:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 42:
                  if ((0x20100000201000L & l) != 0L && kind > 128)
                     kind = 128;
                  break;
               case 44:
                  if ((0x20000000200000L & l) != 0L && kind > 129)
                     kind = 129;
                  break;
               case 46:
                  if ((0x100000001000L & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               case 47:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((0x20000000200000L & l) != 0L && kind > 130)
                     kind = 130;
                  break;
               case 49:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 131)
                     kind = 131;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 132)
                     kind = 132;
                  jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if ((0x20100000201000L & l) != 0L && kind > 132)
                     kind = 132;
                  break;
               case 56:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if ((0x20000000200000L & l) != 0L && kind > 133)
                     kind = 133;
                  break;
               case 59:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(60);
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(48, 50);
                  break;
               case 61:
                  if ((0x100000001000L & l) != 0L && kind > 134)
                     kind = 134;
                  break;
               case 62:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x20000000200000L & l) != 0L && kind > 134)
                     kind = 134;
                  break;
               case 64:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 71:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 74:
                  if ((0x104000001040L & l) != 0L && kind > 136)
                     kind = 136;
                  break;
               case 75:
                  if (curChar == 76)
                     jjAddStates(54, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(9, 11);
                  break;
               case 12:
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(6, 8);
                  break;
               case 19:
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(35, 37);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 76 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 11);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 16);
      case 47:
         return jjMoveStringLiteralDfa1_4(0x60000L);
      case 92:
         return jjMoveStringLiteralDfa1_4(0x180000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         break;
      case 13:
         return jjMoveStringLiteralDfa2_4(active0, 0x100000L);
      case 42:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      case 47:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(2, 20);
         break;
      default :
         return 3;
   }
   return 3;
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x8000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x2000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   66, 67, 69, 0, 70, 71, 12, 13, 15, 7, 8, 10, 40, 41, 42, 43, 
   44, 45, 47, 49, 51, 53, 56, 59, 29, 30, 31, 32, 33, 34, 36, 38, 
   1, 2, 5, 19, 20, 23, 34, 36, 38, 45, 47, 49, 54, 55, 57, 58, 
   60, 62, 64, 68, 2, 5, 6, 11, 3, 4, 13, 14, 17, 72, 73, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\173", "\175", "\133", 
"\135", "\50", "\51", "\72\72", "\72", "\73", "\54", "\77", "\56\56\56", "\75", 
"\52\75", "\57\75", "\45\75", "\53\75", "\55\75", "\74\74\75", "\76\76\75", "\46\75", 
"\136\75", "\174\75", "\174\174", "\46\46", "\174", "\136", "\46", "\75\75", "\41\75", 
"\74", "\76", "\74\75", "\76\75", "\74\74", "\76\76", "\53", "\55", "\52", "\57", 
"\45", "\53\53", "\55\55", "\176", "\41", "\56", "\55\76", "\56\52", "\55\76\52", 
"\141\165\164\157", "\142\162\145\141\153", "\143\141\163\145", "\143\141\164\143\150", 
"\143\150\141\162", "\143\157\156\163\164", "\143\157\156\164\151\156\165\145", 
"\144\145\146\141\165\154\164", "\144\145\154\145\164\145", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\145\170\164\145\162\156", "\146\154\157\141\164", 
"\146\157\162", "\146\162\151\145\156\144", "\147\157\164\157", "\151\146", 
"\151\156\154\151\156\145", "\151\156\164", "\154\157\156\147", "\156\145\167", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\144\145\143\154\141\162\145\144", "\162\145\147\151\163\164\145\162", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\151\147\156\145\144", "\163\151\172\145\157\146", 
"\163\164\141\164\151\143", "\163\164\162\165\143\164", "\143\154\141\163\163", 
"\163\167\151\164\143\150", "\164\145\155\160\154\141\164\145", "\164\150\151\163", "\164\162\171", 
"\164\171\160\145\144\145\146", "\165\156\151\157\156", "\165\156\163\151\147\156\145\144", 
"\166\151\162\164\165\141\154", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", "\157\160\145\162\141\164\157\162", "\164\162\165\145", 
"\146\141\154\163\145", "\164\150\162\157\167", "\100", "\146\151\156\141\154\154\171", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_LINE_COMMENT",
   "IN_COMMENT",
   "IN_PREPROCESSOR_OUTPUT_COMMENT",
   "PREPROCESSOR_OUTPUT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 2, 4, -1, -1, 0, -1, 0, -1, 4, 0, 3, 1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffc00001L, 0xffffffffffffffffL, 0x1fffL, 
};
static final long[] jjtoSkip = {
   0x7affeL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x385000L, 0x0L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[76];
private final int[] jjstateSet = new int[152];
protected char curChar;
/** Constructor. */
public CppParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public CppParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 76; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100001600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 14)
         {
            jjmatchedKind = 14;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 21)
         {
            jjmatchedKind = 21;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
