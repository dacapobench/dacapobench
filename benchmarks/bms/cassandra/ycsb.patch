diff '--color=auto' -ur ycsb-0.17.0/cassandra/pom.xml ../build/ycsb-0.17.0/cassandra/pom.xml
--- ycsb-0.17.0/cassandra/pom.xml	2023-08-10 10:35:49.000000000 +0000
+++ ../build/ycsb-0.17.0/cassandra/pom.xml	2023-09-05 10:30:06.176383385 +0000
@@ -97,7 +97,7 @@
 		<repository>
 			<id>central2</id>
 			<name>sigar Repository</name>
-			<url>http://repository.jboss.org/nexus/content/groups/public-jboss/</url>
+			<url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url>
 			<layout>default</layout>
 			<snapshots>
 				<enabled>false</enabled>
diff '--color=auto' -ur ycsb-0.17.0/cassandra/src/main/java/site/ycsb/db/CassandraCQLClient.java ../build/ycsb-0.17.0/cassandra/src/main/java/site/ycsb/db/CassandraCQLClient.java
--- ycsb-0.17.0/cassandra/src/main/java/site/ycsb/db/CassandraCQLClient.java	2023-08-10 10:35:49.000000000 +0000
+++ ../build/ycsb-0.17.0/cassandra/src/main/java/site/ycsb/db/CassandraCQLClient.java	2023-09-05 10:26:01.460886299 +0000
@@ -587,7 +587,8 @@
 
       return Status.OK;
     } catch (Exception e) {
-      logger.error(MessageFormatter.format("Error inserting key: {}", key).getMessage(), e);
+      System.err.println("Error inserting key: {"+key+"}");
+      System.err.println(e);
     }
 
     return Status.ERROR;
diff '--color=auto' -ur ycsb-0.17.0/cassandra/src/test/java/site/ycsb/db/CassandraCQLClientTest.java ../build/ycsb-0.17.0/cassandra/src/test/java/site/ycsb/db/CassandraCQLClientTest.java
--- ycsb-0.17.0/cassandra/src/test/java/site/ycsb/db/CassandraCQLClientTest.java	2023-08-10 10:35:49.000000000 +0000
+++ ../build/ycsb-0.17.0/cassandra/src/test/java/site/ycsb/db/CassandraCQLClientTest.java	2023-09-05 10:26:01.460886299 +0000
@@ -56,7 +56,7 @@
  */
 public class CassandraCQLClientTest {
   // Change the default Cassandra timeout from 10s to 120s for slow CI machines
-  private final static long timeout = 120000L;
+  private final static long timeout = (long) (120000L * Float.parseFloat(System.getProperty("dacapo.timeout.dialation")));
 
   private final static String TABLE = "usertable";
   private final static String HOST = "localhost";
diff '--color=auto' -ur ycsb-0.17.0/core/src/main/java/site/ycsb/Client.java ../build/ycsb-0.17.0/core/src/main/java/site/ycsb/Client.java
--- ycsb-0.17.0/core/src/main/java/site/ycsb/Client.java	2023-08-10 10:35:49.000000000 +0000
+++ ../build/ycsb-0.17.0/core/src/main/java/site/ycsb/Client.java	2023-09-05 10:26:01.460886299 +0000
@@ -33,6 +33,9 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
+import java.lang.reflect.Method;
+import java.lang.reflect.InvocationTargetException;
+
 /**
  * Turn seconds remaining into more useful units.
  * i.e. if there are hours or days worth of seconds, use them.
@@ -155,7 +158,6 @@
   private static StatusThread statusthread = null;
 
   // HTrace integration related constants.
-
   /**
    * All keys for configuring the tracing system start with this prefix.
    */
@@ -267,9 +269,10 @@
 
       Measurements.getMeasurements().exportMeasurements(exporter);
     } finally {
-      if (exporter != null) {
-        exporter.close();
-      }
+      // DaCapo XXX: closing the exporter will also close the DaCapo TeePrintStream
+      // if (exporter != null) {
+      //   exporter.close();
+      // }
     }
   }
 
@@ -305,7 +308,6 @@
 
     initWorkload(props, warningthread, workload, tracer);
 
-    System.err.println("Starting test.");
     final CountDownLatch completeLatch = new CountDownLatch(threadcount);
 
     final List<ClientThread> clients = initDb(dbname, props, threadcount, targetperthreadperms,
@@ -337,7 +339,6 @@
       }
 
       st = System.currentTimeMillis();
-
       for (Thread t : threads.keySet()) {
         t.start();
       }
@@ -367,7 +368,6 @@
         if (terminator != null && !terminator.isInterrupted()) {
           terminator.interrupt();
         }
-
         if (status) {
           // wake up status thread if it's asleep
           statusthread.interrupt();
@@ -378,7 +378,10 @@
             // ignored
           }
         }
-
+        System.out.println("\r    100%");
+        if (Boolean.valueOf(props.getProperty(DO_TRANSACTIONS_PROPERTY, String.valueOf(true)))) {
+          dacapoRequestsFinished();
+        }
         workload.cleanup();
       }
     } catch (WorkloadException e) {
@@ -396,8 +399,78 @@
       e.printStackTrace();
       System.exit(-1);
     }
+  }
 
-    System.exit(0);
+  private static int transactions;
+  private static Method dacapoInitializeLR;
+  private static Method dacapoRequestsStarting;
+  private static Method dacapoRequestsFinished;
+  private static Method dacapoRequestStart;
+  private static Method dacapoRequestEnd;
+  private static void dacapoInitializeLR(int tx, int threads) {
+    transactions = tx;
+    try {
+      Class<?> clazz = Class.forName("org.dacapo.harness.LatencyReporter",
+          true, Client.class.getClassLoader());
+      dacapoInitializeLR = clazz.getMethod("initialize", int.class, int.class, int.class);
+      dacapoRequestStart = clazz.getMethod("start", int.class);
+      dacapoRequestEnd = clazz.getMethod("end", int.class);
+      dacapoRequestsStarting = clazz.getDeclaredMethod("requestsStarting", null);
+      dacapoRequestsFinished = clazz.getDeclaredMethod("requestsFinished", null);
+    } catch (ClassNotFoundException e) {
+      System.err.println("Failed to resolve DaCapo latency reporter class: "+e); e.printStackTrace();
+    } catch (NoSuchMethodException e) {
+      System.err.println("Failed to resolve methods within DaCapo latency reporter: "+e); e.printStackTrace();
+    }
+
+    try {
+      dacapoInitializeLR.invoke(null, transactions, threads, 100);
+    } catch (IllegalAccessException e) {
+      System.err.println("Failed to access DaCapo LatencyReporter.initialize(): "+e); e.printStackTrace();
+    } catch (InvocationTargetException e) {
+      System.err.println("Failed to invoke DaCapo LatencyReporter.initialize(): "+e); e.printStackTrace();
+    }
+  }
+
+  public static void dacapoRequestsStarting() {
+    try {
+      dacapoRequestsStarting.invoke(null);
+    } catch (IllegalAccessException e) {
+      System.err.println("Failed to access DaCapo LatencyReporter.requestsStarting(): "+e); e.printStackTrace();
+    } catch (InvocationTargetException e) {
+      System.err.println("Failed to invoke DaCapo LatencyReporter.requestsStarting(): "+e); e.printStackTrace();
+    }
+  }
+
+  public static void dacapoRequestsFinished() {
+    try {
+      dacapoRequestsFinished.invoke(null);
+    } catch (IllegalAccessException e) {
+      System.err.println("Failed to access DaCapo LatencyReporter.requestsFinished(): "+e); e.printStackTrace();
+    } catch (InvocationTargetException e) {
+      System.err.println("Failed to invoke DaCapo LatencyReporter.requestsFinished(): "+e); e.printStackTrace();
+    }
+  }
+
+  public static boolean dacapoRequestStart(int threadID) {
+    try {
+      return ((Integer) dacapoRequestStart.invoke(null, threadID) < transactions);
+    } catch (IllegalAccessException e) {
+      System.err.println("Failed to access DaCapo LatencyReporter.start(): "+e); e.printStackTrace();
+    } catch (InvocationTargetException e) {
+      System.err.println("Failed to invoke DaCapo LatencyReporter.start(): "+e); e.printStackTrace();
+    }
+    return false;
+  }
+
+  public static void dacapoRequestEnd(int threadID) {
+    try {
+      dacapoRequestEnd.invoke(null, threadID);  // only one reporter object
+    } catch (IllegalAccessException e) {
+      System.err.println("Failed to access DaCapo LatencyReporter.end(): "+e); e.printStackTrace();
+    } catch (InvocationTargetException e) {
+      System.err.println("Failed to invoke DaCapo LatencyReporter.end(): "+e); e.printStackTrace();
+    }
   }
 
   private static List<ClientThread> initDb(String dbname, Properties props, int threadcount,
@@ -409,19 +482,25 @@
     final List<ClientThread> clients = new ArrayList<>(threadcount);
     try (final TraceScope span = tracer.newScope(CLIENT_INIT_SPAN)) {
       int opcount;
+
       if (dotransactions) {
         opcount = Integer.parseInt(props.getProperty(OPERATION_COUNT_PROPERTY, "0"));
+
+        dacapoInitializeLR(opcount, threadcount);
+        dacapoRequestsStarting();
       } else {
         if (props.containsKey(INSERT_COUNT_PROPERTY)) {
           opcount = Integer.parseInt(props.getProperty(INSERT_COUNT_PROPERTY, "0"));
         } else {
           opcount = Integer.parseInt(props.getProperty(RECORD_COUNT_PROPERTY, DEFAULT_RECORD_COUNT));
         }
+        System.out.println("    records: "+props.getProperty(RECORD_COUNT_PROPERTY));
       }
       if (threadcount > opcount){
         threadcount = opcount;
         System.out.println("Warning: the threadcount is bigger than recordcount, the threadcount will be recordcount!");
       }
+
       for (int threadid = 0; threadid < threadcount; threadid++) {
         DB db;
         try {
@@ -506,13 +585,13 @@
     try {
       Properties projectProp = new Properties();
       projectProp.load(classLoader.getResourceAsStream("project.properties"));
-      System.err.println("YCSB Client " + projectProp.getProperty("version"));
+      if (props.getProperty(DO_TRANSACTIONS_PROPERTY).equals(String.valueOf(false))) {
+        System.out.println("    YCSB Client " + projectProp.getProperty("version"));
+        System.out.println("    workload: "+props.getProperty(WORKLOAD_PROPERTY));
+      }
     } catch (IOException e) {
       System.err.println("Unable to retrieve client version.");
     }
-
-    System.err.println();
-    System.err.println("Loading workload...");
     try {
       Class workloadclass = classLoader.loadClass(props.getProperty(WORKLOAD_PROPERTY));
 
@@ -528,15 +607,8 @@
 
   private static Properties parseArguments(String[] args) {
     Properties props = new Properties();
-    System.err.print("Command line:");
-    for (String arg : args) {
-      System.err.print(" " + arg);
-    }
-    System.err.println();
-
     Properties fileprops = new Properties();
     int argindex = 0;
-
     if (args.length == 0) {
       usageMessage();
       System.out.println("At least one argument specifying a workload is required.");
@@ -565,6 +637,7 @@
         props.setProperty(TARGET_PROPERTY, String.valueOf(ttarget));
         argindex++;
       } else if (args[argindex].compareTo("-load") == 0) {
+        System.out.println("Loading database... ");
         props.setProperty(DO_TRANSACTIONS_PROPERTY, String.valueOf(false));
         argindex++;
       } else if (args[argindex].compareTo("-t") == 0) {
diff '--color=auto' -ur ycsb-0.17.0/core/src/main/java/site/ycsb/ClientThread.java ../build/ycsb-0.17.0/core/src/main/java/site/ycsb/ClientThread.java
--- ycsb-0.17.0/core/src/main/java/site/ycsb/ClientThread.java	2023-08-10 10:35:49.000000000 +0000
+++ ../build/ycsb-0.17.0/core/src/main/java/site/ycsb/ClientThread.java	2023-09-05 10:26:01.460886299 +0000
@@ -44,6 +44,7 @@
   private Properties props;
   private long targetOpsTickNs;
   private final Measurements measurements;
+  private int fivepercent;
 
   /**
    * Constructor.
@@ -62,6 +63,7 @@
     this.dotransactions = dotransactions;
     this.workload = workload;
     this.opcount = opcount;
+
     opsdone = 0;
     if (targetperthreadperms > 0) {
       targetOpsPerMs = targetperthreadperms;
@@ -103,6 +105,10 @@
       return;
     }
 
+    if (threadid == 0 && opcount*threadcount > 5000) {
+      fivepercent = opcount/20;
+    }
+
     //NOTE: Switching to using nanoTime and parkNanos for time management here such that the measurements
     // and the client thread have the same view on time.
 
@@ -117,14 +123,14 @@
       if (dotransactions) {
         long startTimeNanos = System.nanoTime();
 
-        while (((opcount == 0) || (opsdone < opcount)) && !workload.isStopRequested()) {
+        while (Client.dacapoRequestStart(threadid) && !workload.isStopRequested()) {
 
           if (!workload.doTransaction(db, workloadstate)) {
             break;
           }
-
+          Client.dacapoRequestEnd(threadid);
           opsdone++;
-
+          progress();
           throttleNanos(startTimeNanos);
         }
       } else {
@@ -135,9 +141,8 @@
           if (!workload.doInsert(db, workloadstate)) {
             break;
           }
-
           opsdone++;
-
+          progress();
           throttleNanos(startTimeNanos);
         }
       }
@@ -158,6 +163,15 @@
     }
   }
 
+  private void progress() {
+    if (fivepercent > 0 && opsdone % fivepercent == 0) {
+      int pct = 5*opsdone/fivepercent;
+      if (pct < 100) {
+        System.out.print("\r    "+pct+"%");
+      }
+    }
+  }
+
   private static void sleepUntil(long deadline) {
     while (System.nanoTime() < deadline) {
       if (!spinSleep) {
diff '--color=auto' -ur ycsb-0.17.0/core/src/main/java/site/ycsb/DBWrapper.java ../build/ycsb-0.17.0/core/src/main/java/site/ycsb/DBWrapper.java
--- ycsb-0.17.0/core/src/main/java/site/ycsb/DBWrapper.java	2023-08-10 10:35:49.000000000 +0000
+++ ../build/ycsb-0.17.0/core/src/main/java/site/ycsb/DBWrapper.java	2023-09-05 10:26:01.460886299 +0000
@@ -97,9 +97,11 @@
         }
       }
 
-      System.err.println("DBWrapper: report latency for each error is " +
-          this.reportLatencyForEachError + " and specific error codes to track" +
-          " for latency are: " + this.latencyTrackedErrors.toString());
+      if (reportLatencyForEachError) {
+        System.err.println("DBWrapper: report latency for each error is " +
+            this.reportLatencyForEachError + " and specific error codes to track" +
+            " for latency are: " + this.latencyTrackedErrors.toString());
+      }
     }
   }
 
diff '--color=auto' -ur ycsb-0.17.0/core/src/main/java/site/ycsb/workloads/CoreWorkload.java ../build/ycsb-0.17.0/core/src/main/java/site/ycsb/workloads/CoreWorkload.java
--- ycsb-0.17.0/core/src/main/java/site/ycsb/workloads/CoreWorkload.java	2023-08-10 10:35:49.000000000 +0000
+++ ../build/ycsb-0.17.0/core/src/main/java/site/ycsb/workloads/CoreWorkload.java	2023-09-05 10:26:01.460886299 +0000
@@ -617,9 +617,9 @@
 
       } else {
         System.err.println("Error inserting, not retrying any more. number of attempts: " + numOfRetries +
-            "Insertion Retry Limit: " + insertionRetryLimit);
+            "Insertion Retry Limit: " + insertionRetryLimit+ ", Got "+status);
+        Thread.dumpStack();
         break;
-
       }
     } while (true);
 
diff '--color=auto' -ur ycsb-0.17.0/core/src/main/java/site/ycsb/workloads/TimeSeriesWorkload.java ../build/ycsb-0.17.0/core/src/main/java/site/ycsb/workloads/TimeSeriesWorkload.java
--- ycsb-0.17.0/core/src/main/java/site/ycsb/workloads/TimeSeriesWorkload.java	2023-08-10 10:35:49.000000000 +0000
+++ ../build/ycsb-0.17.0/core/src/main/java/site/ycsb/workloads/TimeSeriesWorkload.java	2023-09-05 10:26:01.464886290 +0000
@@ -309,11 +309,11 @@
   
   /** Name and default value for the timestamp key property. */
   public static final String TIMESTAMP_KEY_PROPERTY = "timestampkey";
-  public static final String TIMESTAMP_KEY_PROPERTY_DEFAULT = "YCSBTS";
+  public static final String TIMESTAMP_KEY_PROPERTY_DEFAULT = "field4";
   
   /** Name and default value for the value key property. */
   public static final String VALUE_KEY_PROPERTY = "valuekey";
-  public static final String VALUE_KEY_PROPERTY_DEFAULT = "YCSBV";
+  public static final String VALUE_KEY_PROPERTY_DEFAULT = "field5";
   
   /** Name and default value for the timestamp interval property. */    
   public static final String TIMESTAMP_INTERVAL_PROPERTY = "timestampinterval";    
@@ -1014,7 +1014,7 @@
     }
 
     for (int i = 0; i < tagPairs; ++i) {
-      tagKeys[i] = tagKeyGenerator.nextString();
+      tagKeys[i] = "field"+i;
     }
     
     for (int i = 0; i < maxCardinality; i++) {
